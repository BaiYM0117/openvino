// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: framework.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_framework_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_framework_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_framework_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_framework_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_framework_2eproto;
namespace paddle {
namespace framework {
namespace proto {
class BlockDesc;
class BlockDescDefaultTypeInternal;
extern BlockDescDefaultTypeInternal _BlockDesc_default_instance_;
class OpDesc;
class OpDescDefaultTypeInternal;
extern OpDescDefaultTypeInternal _OpDesc_default_instance_;
class OpDesc_Attr;
class OpDesc_AttrDefaultTypeInternal;
extern OpDesc_AttrDefaultTypeInternal _OpDesc_Attr_default_instance_;
class OpDesc_Var;
class OpDesc_VarDefaultTypeInternal;
extern OpDesc_VarDefaultTypeInternal _OpDesc_Var_default_instance_;
class OpProto;
class OpProtoDefaultTypeInternal;
extern OpProtoDefaultTypeInternal _OpProto_default_instance_;
class OpProto_Attr;
class OpProto_AttrDefaultTypeInternal;
extern OpProto_AttrDefaultTypeInternal _OpProto_Attr_default_instance_;
class OpProto_Var;
class OpProto_VarDefaultTypeInternal;
extern OpProto_VarDefaultTypeInternal _OpProto_Var_default_instance_;
class OpVersion;
class OpVersionDefaultTypeInternal;
extern OpVersionDefaultTypeInternal _OpVersion_default_instance_;
class OpVersionMap;
class OpVersionMapDefaultTypeInternal;
extern OpVersionMapDefaultTypeInternal _OpVersionMap_default_instance_;
class OpVersionMap_OpVersionPair;
class OpVersionMap_OpVersionPairDefaultTypeInternal;
extern OpVersionMap_OpVersionPairDefaultTypeInternal _OpVersionMap_OpVersionPair_default_instance_;
class ProgramDesc;
class ProgramDescDefaultTypeInternal;
extern ProgramDescDefaultTypeInternal _ProgramDesc_default_instance_;
class VarDesc;
class VarDescDefaultTypeInternal;
extern VarDescDefaultTypeInternal _VarDesc_default_instance_;
class VarType;
class VarTypeDefaultTypeInternal;
extern VarTypeDefaultTypeInternal _VarType_default_instance_;
class VarType_LoDTensorArrayDesc;
class VarType_LoDTensorArrayDescDefaultTypeInternal;
extern VarType_LoDTensorArrayDescDefaultTypeInternal _VarType_LoDTensorArrayDesc_default_instance_;
class VarType_LoDTensorDesc;
class VarType_LoDTensorDescDefaultTypeInternal;
extern VarType_LoDTensorDescDefaultTypeInternal _VarType_LoDTensorDesc_default_instance_;
class VarType_ReaderDesc;
class VarType_ReaderDescDefaultTypeInternal;
extern VarType_ReaderDescDefaultTypeInternal _VarType_ReaderDesc_default_instance_;
class VarType_TensorDesc;
class VarType_TensorDescDefaultTypeInternal;
extern VarType_TensorDescDefaultTypeInternal _VarType_TensorDesc_default_instance_;
class VarType_Tuple;
class VarType_TupleDefaultTypeInternal;
extern VarType_TupleDefaultTypeInternal _VarType_Tuple_default_instance_;
class Version;
class VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace proto
}  // namespace framework
}  // namespace paddle
PROTOBUF_NAMESPACE_OPEN
template<> ::paddle::framework::proto::BlockDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::BlockDesc>(Arena*);
template<> ::paddle::framework::proto::OpDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::OpDesc>(Arena*);
template<> ::paddle::framework::proto::OpDesc_Attr* Arena::CreateMaybeMessage<::paddle::framework::proto::OpDesc_Attr>(Arena*);
template<> ::paddle::framework::proto::OpDesc_Var* Arena::CreateMaybeMessage<::paddle::framework::proto::OpDesc_Var>(Arena*);
template<> ::paddle::framework::proto::OpProto* Arena::CreateMaybeMessage<::paddle::framework::proto::OpProto>(Arena*);
template<> ::paddle::framework::proto::OpProto_Attr* Arena::CreateMaybeMessage<::paddle::framework::proto::OpProto_Attr>(Arena*);
template<> ::paddle::framework::proto::OpProto_Var* Arena::CreateMaybeMessage<::paddle::framework::proto::OpProto_Var>(Arena*);
template<> ::paddle::framework::proto::OpVersion* Arena::CreateMaybeMessage<::paddle::framework::proto::OpVersion>(Arena*);
template<> ::paddle::framework::proto::OpVersionMap* Arena::CreateMaybeMessage<::paddle::framework::proto::OpVersionMap>(Arena*);
template<> ::paddle::framework::proto::OpVersionMap_OpVersionPair* Arena::CreateMaybeMessage<::paddle::framework::proto::OpVersionMap_OpVersionPair>(Arena*);
template<> ::paddle::framework::proto::ProgramDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::ProgramDesc>(Arena*);
template<> ::paddle::framework::proto::VarDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::VarDesc>(Arena*);
template<> ::paddle::framework::proto::VarType* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType>(Arena*);
template<> ::paddle::framework::proto::VarType_LoDTensorArrayDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType_LoDTensorArrayDesc>(Arena*);
template<> ::paddle::framework::proto::VarType_LoDTensorDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType_LoDTensorDesc>(Arena*);
template<> ::paddle::framework::proto::VarType_ReaderDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType_ReaderDesc>(Arena*);
template<> ::paddle::framework::proto::VarType_TensorDesc* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType_TensorDesc>(Arena*);
template<> ::paddle::framework::proto::VarType_Tuple* Arena::CreateMaybeMessage<::paddle::framework::proto::VarType_Tuple>(Arena*);
template<> ::paddle::framework::proto::Version* Arena::CreateMaybeMessage<::paddle::framework::proto::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace paddle {
namespace framework {
namespace proto {

enum VarType_Type : int {
  VarType_Type_BOOL = 0,
  VarType_Type_INT16 = 1,
  VarType_Type_INT32 = 2,
  VarType_Type_INT64 = 3,
  VarType_Type_FP16 = 4,
  VarType_Type_FP32 = 5,
  VarType_Type_FP64 = 6,
  VarType_Type_SIZE_T = 19,
  VarType_Type_UINT8 = 20,
  VarType_Type_INT8 = 21,
  VarType_Type_BF16 = 22,
  VarType_Type_COMPLEX64 = 23,
  VarType_Type_COMPLEX128 = 24,
  VarType_Type_LOD_TENSOR = 7,
  VarType_Type_SELECTED_ROWS = 8,
  VarType_Type_FEED_MINIBATCH = 9,
  VarType_Type_FETCH_LIST = 10,
  VarType_Type_STEP_SCOPES = 11,
  VarType_Type_LOD_RANK_TABLE = 12,
  VarType_Type_LOD_TENSOR_ARRAY = 13,
  VarType_Type_PLACE_LIST = 14,
  VarType_Type_READER = 15,
  VarType_Type_RAW = 17,
  VarType_Type_TUPLE = 18
};
bool VarType_Type_IsValid(int value);
constexpr VarType_Type VarType_Type_Type_MIN = VarType_Type_BOOL;
constexpr VarType_Type VarType_Type_Type_MAX = VarType_Type_COMPLEX128;
constexpr int VarType_Type_Type_ARRAYSIZE = VarType_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VarType_Type_descriptor();
template<typename T>
inline const std::string& VarType_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VarType_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VarType_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VarType_Type_descriptor(), enum_t_value);
}
inline bool VarType_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, VarType_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VarType_Type>(
    VarType_Type_descriptor(), name, value);
}
enum AttrType : int {
  INT = 0,
  FLOAT = 1,
  STRING = 2,
  INTS = 3,
  FLOATS = 4,
  STRINGS = 5,
  BOOLEAN = 6,
  BOOLEANS = 7,
  BLOCK = 8,
  LONG = 9,
  BLOCKS = 10,
  LONGS = 11
};
bool AttrType_IsValid(int value);
constexpr AttrType AttrType_MIN = INT;
constexpr AttrType AttrType_MAX = LONGS;
constexpr int AttrType_ARRAYSIZE = AttrType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttrType_descriptor();
template<typename T>
inline const std::string& AttrType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AttrType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AttrType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AttrType_descriptor(), enum_t_value);
}
inline bool AttrType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AttrType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AttrType>(
    AttrType_descriptor(), name, value);
}
// ===================================================================

class Version PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  virtual ~Version();

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Version& default_instance();

  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  inline void Swap(Version* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Version* New() const final {
    return CreateMaybeMessage<Version>(nullptr);
  }

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Version* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // optional int64 version = 1 [default = 0];
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int64 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 version_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpDesc_Attr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpDesc.Attr) */ {
 public:
  inline OpDesc_Attr() : OpDesc_Attr(nullptr) {}
  virtual ~OpDesc_Attr();

  OpDesc_Attr(const OpDesc_Attr& from);
  OpDesc_Attr(OpDesc_Attr&& from) noexcept
    : OpDesc_Attr() {
    *this = ::std::move(from);
  }

  inline OpDesc_Attr& operator=(const OpDesc_Attr& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDesc_Attr& operator=(OpDesc_Attr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDesc_Attr& default_instance();

  static inline const OpDesc_Attr* internal_default_instance() {
    return reinterpret_cast<const OpDesc_Attr*>(
               &_OpDesc_Attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OpDesc_Attr& a, OpDesc_Attr& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDesc_Attr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDesc_Attr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDesc_Attr* New() const final {
    return CreateMaybeMessage<OpDesc_Attr>(nullptr);
  }

  OpDesc_Attr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDesc_Attr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDesc_Attr& from);
  void MergeFrom(const OpDesc_Attr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDesc_Attr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpDesc.Attr";
  }
  protected:
  explicit OpDesc_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntsFieldNumber = 6,
    kFloatsFieldNumber = 7,
    kStringsFieldNumber = 8,
    kBoolsFieldNumber = 11,
    kBlocksIdxFieldNumber = 14,
    kLongsFieldNumber = 15,
    kNameFieldNumber = 1,
    kSFieldNumber = 5,
    kTypeFieldNumber = 2,
    kIFieldNumber = 3,
    kFFieldNumber = 4,
    kBFieldNumber = 10,
    kLFieldNumber = 13,
    kBlockIdxFieldNumber = 12,
  };
  // repeated int32 ints = 6;
  int ints_size() const;
  private:
  int _internal_ints_size() const;
  public:
  void clear_ints();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_ints() const;
  void _internal_add_ints(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_ints();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 ints(int index) const;
  void set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_ints(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      ints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_ints();

  // repeated float floats = 7;
  int floats_size() const;
  private:
  int _internal_floats_size() const;
  public:
  void clear_floats();
  private:
  float _internal_floats(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_floats() const;
  void _internal_add_floats(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_floats();
  public:
  float floats(int index) const;
  void set_floats(int index, float value);
  void add_floats(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      floats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_floats();

  // repeated string strings = 8;
  int strings_size() const;
  private:
  int _internal_strings_size() const;
  public:
  void clear_strings();
  const std::string& strings(int index) const;
  std::string* mutable_strings(int index);
  void set_strings(int index, const std::string& value);
  void set_strings(int index, std::string&& value);
  void set_strings(int index, const char* value);
  void set_strings(int index, const char* value, size_t size);
  std::string* add_strings();
  void add_strings(const std::string& value);
  void add_strings(std::string&& value);
  void add_strings(const char* value);
  void add_strings(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& strings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_strings();
  private:
  const std::string& _internal_strings(int index) const;
  std::string* _internal_add_strings();
  public:

  // repeated bool bools = 11;
  int bools_size() const;
  private:
  int _internal_bools_size() const;
  public:
  void clear_bools();
  private:
  bool _internal_bools(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_bools() const;
  void _internal_add_bools(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_bools();
  public:
  bool bools(int index) const;
  void set_bools(int index, bool value);
  void add_bools(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      bools() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_bools();

  // repeated int32 blocks_idx = 14;
  int blocks_idx_size() const;
  private:
  int _internal_blocks_idx_size() const;
  public:
  void clear_blocks_idx();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_blocks_idx(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_blocks_idx() const;
  void _internal_add_blocks_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_blocks_idx();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 blocks_idx(int index) const;
  void set_blocks_idx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_blocks_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      blocks_idx() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_blocks_idx();

  // repeated int64 longs = 15;
  int longs_size() const;
  private:
  int _internal_longs_size() const;
  public:
  void clear_longs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_longs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_longs() const;
  void _internal_add_longs(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_longs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 longs(int index) const;
  void set_longs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_longs(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      longs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_longs();

  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string s = 5;
  bool has_s() const;
  private:
  bool _internal_has_s() const;
  public:
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const char* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // required .paddle.framework.proto.AttrType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::paddle::framework::proto::AttrType type() const;
  void set_type(::paddle::framework::proto::AttrType value);
  private:
  ::paddle::framework::proto::AttrType _internal_type() const;
  void _internal_set_type(::paddle::framework::proto::AttrType value);
  public:

  // optional int32 i = 3;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  ::PROTOBUF_NAMESPACE_ID::int32 i() const;
  void set_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i() const;
  void _internal_set_i(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float f = 4;
  bool has_f() const;
  private:
  bool _internal_has_f() const;
  public:
  void clear_f();
  float f() const;
  void set_f(float value);
  private:
  float _internal_f() const;
  void _internal_set_f(float value);
  public:

  // optional bool b = 10;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  bool b() const;
  void set_b(bool value);
  private:
  bool _internal_b() const;
  void _internal_set_b(bool value);
  public:

  // optional int64 l = 13;
  bool has_l() const;
  private:
  bool _internal_has_l() const;
  public:
  void clear_l();
  ::PROTOBUF_NAMESPACE_ID::int64 l() const;
  void set_l(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_l() const;
  void _internal_set_l(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 block_idx = 12;
  bool has_block_idx() const;
  private:
  bool _internal_has_block_idx() const;
  public:
  void clear_block_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 block_idx() const;
  void set_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_block_idx() const;
  void _internal_set_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpDesc.Attr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > ints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > floats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> strings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > bools_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > blocks_idx_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > longs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 i_;
  float f_;
  bool b_;
  ::PROTOBUF_NAMESPACE_ID::int64 l_;
  ::PROTOBUF_NAMESPACE_ID::int32 block_idx_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpDesc_Var PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpDesc.Var) */ {
 public:
  inline OpDesc_Var() : OpDesc_Var(nullptr) {}
  virtual ~OpDesc_Var();

  OpDesc_Var(const OpDesc_Var& from);
  OpDesc_Var(OpDesc_Var&& from) noexcept
    : OpDesc_Var() {
    *this = ::std::move(from);
  }

  inline OpDesc_Var& operator=(const OpDesc_Var& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDesc_Var& operator=(OpDesc_Var&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDesc_Var& default_instance();

  static inline const OpDesc_Var* internal_default_instance() {
    return reinterpret_cast<const OpDesc_Var*>(
               &_OpDesc_Var_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OpDesc_Var& a, OpDesc_Var& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDesc_Var* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDesc_Var* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDesc_Var* New() const final {
    return CreateMaybeMessage<OpDesc_Var>(nullptr);
  }

  OpDesc_Var* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDesc_Var>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDesc_Var& from);
  void MergeFrom(const OpDesc_Var& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDesc_Var* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpDesc.Var";
  }
  protected:
  explicit OpDesc_Var(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 2,
    kParameterFieldNumber = 1,
  };
  // repeated string arguments = 2;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  const std::string& arguments(int index) const;
  std::string* mutable_arguments(int index);
  void set_arguments(int index, const std::string& value);
  void set_arguments(int index, std::string&& value);
  void set_arguments(int index, const char* value);
  void set_arguments(int index, const char* value, size_t size);
  std::string* add_arguments();
  void add_arguments(const std::string& value);
  void add_arguments(std::string&& value);
  void add_arguments(const char* value);
  void add_arguments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& arguments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_arguments();
  private:
  const std::string& _internal_arguments(int index) const;
  std::string* _internal_add_arguments();
  public:

  // required string parameter = 1;
  bool has_parameter() const;
  private:
  bool _internal_has_parameter() const;
  public:
  void clear_parameter();
  const std::string& parameter() const;
  void set_parameter(const std::string& value);
  void set_parameter(std::string&& value);
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  std::string* mutable_parameter();
  std::string* release_parameter();
  void set_allocated_parameter(std::string* parameter);
  private:
  const std::string& _internal_parameter() const;
  void _internal_set_parameter(const std::string& value);
  std::string* _internal_mutable_parameter();
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpDesc.Var)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> arguments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpDesc) */ {
 public:
  inline OpDesc() : OpDesc(nullptr) {}
  virtual ~OpDesc();

  OpDesc(const OpDesc& from);
  OpDesc(OpDesc&& from) noexcept
    : OpDesc() {
    *this = ::std::move(from);
  }

  inline OpDesc& operator=(const OpDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpDesc& operator=(OpDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpDesc& default_instance();

  static inline const OpDesc* internal_default_instance() {
    return reinterpret_cast<const OpDesc*>(
               &_OpDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OpDesc& a, OpDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(OpDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpDesc* New() const final {
    return CreateMaybeMessage<OpDesc>(nullptr);
  }

  OpDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpDesc& from);
  void MergeFrom(const OpDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpDesc";
  }
  protected:
  explicit OpDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpDesc_Attr Attr;
  typedef OpDesc_Var Var;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 1,
    kOutputsFieldNumber = 2,
    kAttrsFieldNumber = 4,
    kTypeFieldNumber = 3,
    kIsTargetFieldNumber = 5,
  };
  // repeated .paddle.framework.proto.OpDesc.Var inputs = 1;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::paddle::framework::proto::OpDesc_Var* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >*
      mutable_inputs();
  private:
  const ::paddle::framework::proto::OpDesc_Var& _internal_inputs(int index) const;
  ::paddle::framework::proto::OpDesc_Var* _internal_add_inputs();
  public:
  const ::paddle::framework::proto::OpDesc_Var& inputs(int index) const;
  ::paddle::framework::proto::OpDesc_Var* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >&
      inputs() const;

  // repeated .paddle.framework.proto.OpDesc.Var outputs = 2;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::paddle::framework::proto::OpDesc_Var* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >*
      mutable_outputs();
  private:
  const ::paddle::framework::proto::OpDesc_Var& _internal_outputs(int index) const;
  ::paddle::framework::proto::OpDesc_Var* _internal_add_outputs();
  public:
  const ::paddle::framework::proto::OpDesc_Var& outputs(int index) const;
  ::paddle::framework::proto::OpDesc_Var* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >&
      outputs() const;

  // repeated .paddle.framework.proto.OpDesc.Attr attrs = 4;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  ::paddle::framework::proto::OpDesc_Attr* mutable_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Attr >*
      mutable_attrs();
  private:
  const ::paddle::framework::proto::OpDesc_Attr& _internal_attrs(int index) const;
  ::paddle::framework::proto::OpDesc_Attr* _internal_add_attrs();
  public:
  const ::paddle::framework::proto::OpDesc_Attr& attrs(int index) const;
  ::paddle::framework::proto::OpDesc_Attr* add_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Attr >&
      attrs() const;

  // required string type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // optional bool is_target = 5 [default = false];
  bool has_is_target() const;
  private:
  bool _internal_has_is_target() const;
  public:
  void clear_is_target();
  bool is_target() const;
  void set_is_target(bool value);
  private:
  bool _internal_is_target() const;
  void _internal_set_is_target(bool value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Attr > attrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  bool is_target_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpProto_Var PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpProto.Var) */ {
 public:
  inline OpProto_Var() : OpProto_Var(nullptr) {}
  virtual ~OpProto_Var();

  OpProto_Var(const OpProto_Var& from);
  OpProto_Var(OpProto_Var&& from) noexcept
    : OpProto_Var() {
    *this = ::std::move(from);
  }

  inline OpProto_Var& operator=(const OpProto_Var& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProto_Var& operator=(OpProto_Var&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpProto_Var& default_instance();

  static inline const OpProto_Var* internal_default_instance() {
    return reinterpret_cast<const OpProto_Var*>(
               &_OpProto_Var_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OpProto_Var& a, OpProto_Var& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProto_Var* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProto_Var* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpProto_Var* New() const final {
    return CreateMaybeMessage<OpProto_Var>(nullptr);
  }

  OpProto_Var* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpProto_Var>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpProto_Var& from);
  void MergeFrom(const OpProto_Var& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProto_Var* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpProto.Var";
  }
  protected:
  explicit OpProto_Var(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommentFieldNumber = 2,
    kDuplicableFieldNumber = 3,
    kIntermediateFieldNumber = 4,
    kDispensableFieldNumber = 5,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string comment = 2;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // optional bool duplicable = 3 [default = false];
  bool has_duplicable() const;
  private:
  bool _internal_has_duplicable() const;
  public:
  void clear_duplicable();
  bool duplicable() const;
  void set_duplicable(bool value);
  private:
  bool _internal_duplicable() const;
  void _internal_set_duplicable(bool value);
  public:

  // optional bool intermediate = 4 [default = false];
  bool has_intermediate() const;
  private:
  bool _internal_has_intermediate() const;
  public:
  void clear_intermediate();
  bool intermediate() const;
  void set_intermediate(bool value);
  private:
  bool _internal_intermediate() const;
  void _internal_set_intermediate(bool value);
  public:

  // optional bool dispensable = 5 [default = false];
  bool has_dispensable() const;
  private:
  bool _internal_has_dispensable() const;
  public:
  void clear_dispensable();
  bool dispensable() const;
  void set_dispensable(bool value);
  private:
  bool _internal_dispensable() const;
  void _internal_set_dispensable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpProto.Var)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  bool duplicable_;
  bool intermediate_;
  bool dispensable_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpProto_Attr PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpProto.Attr) */ {
 public:
  inline OpProto_Attr() : OpProto_Attr(nullptr) {}
  virtual ~OpProto_Attr();

  OpProto_Attr(const OpProto_Attr& from);
  OpProto_Attr(OpProto_Attr&& from) noexcept
    : OpProto_Attr() {
    *this = ::std::move(from);
  }

  inline OpProto_Attr& operator=(const OpProto_Attr& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProto_Attr& operator=(OpProto_Attr&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpProto_Attr& default_instance();

  static inline const OpProto_Attr* internal_default_instance() {
    return reinterpret_cast<const OpProto_Attr*>(
               &_OpProto_Attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OpProto_Attr& a, OpProto_Attr& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProto_Attr* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProto_Attr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpProto_Attr* New() const final {
    return CreateMaybeMessage<OpProto_Attr>(nullptr);
  }

  OpProto_Attr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpProto_Attr>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpProto_Attr& from);
  void MergeFrom(const OpProto_Attr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProto_Attr* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpProto.Attr";
  }
  protected:
  explicit OpProto_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommentFieldNumber = 3,
    kTypeFieldNumber = 2,
    kGeneratedFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string comment = 3;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // required .paddle.framework.proto.AttrType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::paddle::framework::proto::AttrType type() const;
  void set_type(::paddle::framework::proto::AttrType value);
  private:
  ::paddle::framework::proto::AttrType _internal_type() const;
  void _internal_set_type(::paddle::framework::proto::AttrType value);
  public:

  // optional bool generated = 4 [default = false];
  bool has_generated() const;
  private:
  bool _internal_has_generated() const;
  public:
  void clear_generated();
  bool generated() const;
  void set_generated(bool value);
  private:
  bool _internal_generated() const;
  void _internal_set_generated(bool value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpProto.Attr)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  int type_;
  bool generated_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpProto PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpProto) */ {
 public:
  inline OpProto() : OpProto(nullptr) {}
  virtual ~OpProto();

  OpProto(const OpProto& from);
  OpProto(OpProto&& from) noexcept
    : OpProto() {
    *this = ::std::move(from);
  }

  inline OpProto& operator=(const OpProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpProto& operator=(OpProto&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpProto& default_instance();

  static inline const OpProto* internal_default_instance() {
    return reinterpret_cast<const OpProto*>(
               &_OpProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OpProto& a, OpProto& b) {
    a.Swap(&b);
  }
  inline void Swap(OpProto* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpProto* New() const final {
    return CreateMaybeMessage<OpProto>(nullptr);
  }

  OpProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpProto>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpProto& from);
  void MergeFrom(const OpProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpProto* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpProto";
  }
  protected:
  explicit OpProto(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpProto_Var Var;
  typedef OpProto_Attr Attr;

  // accessors -------------------------------------------------------

  enum : int {
    kInputsFieldNumber = 2,
    kOutputsFieldNumber = 3,
    kAttrsFieldNumber = 4,
    kTypeFieldNumber = 1,
    kCommentFieldNumber = 5,
  };
  // repeated .paddle.framework.proto.OpProto.Var inputs = 2;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::paddle::framework::proto::OpProto_Var* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >*
      mutable_inputs();
  private:
  const ::paddle::framework::proto::OpProto_Var& _internal_inputs(int index) const;
  ::paddle::framework::proto::OpProto_Var* _internal_add_inputs();
  public:
  const ::paddle::framework::proto::OpProto_Var& inputs(int index) const;
  ::paddle::framework::proto::OpProto_Var* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >&
      inputs() const;

  // repeated .paddle.framework.proto.OpProto.Var outputs = 3;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::paddle::framework::proto::OpProto_Var* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >*
      mutable_outputs();
  private:
  const ::paddle::framework::proto::OpProto_Var& _internal_outputs(int index) const;
  ::paddle::framework::proto::OpProto_Var* _internal_add_outputs();
  public:
  const ::paddle::framework::proto::OpProto_Var& outputs(int index) const;
  ::paddle::framework::proto::OpProto_Var* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >&
      outputs() const;

  // repeated .paddle.framework.proto.OpProto.Attr attrs = 4;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  ::paddle::framework::proto::OpProto_Attr* mutable_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Attr >*
      mutable_attrs();
  private:
  const ::paddle::framework::proto::OpProto_Attr& _internal_attrs(int index) const;
  ::paddle::framework::proto::OpProto_Attr* _internal_add_attrs();
  public:
  const ::paddle::framework::proto::OpProto_Attr& attrs(int index) const;
  ::paddle::framework::proto::OpProto_Attr* add_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Attr >&
      attrs() const;

  // required string type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // required string comment = 5;
  bool has_comment() const;
  private:
  bool _internal_has_comment() const;
  public:
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var > outputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Attr > attrs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType_TensorDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType.TensorDesc) */ {
 public:
  inline VarType_TensorDesc() : VarType_TensorDesc(nullptr) {}
  virtual ~VarType_TensorDesc();

  VarType_TensorDesc(const VarType_TensorDesc& from);
  VarType_TensorDesc(VarType_TensorDesc&& from) noexcept
    : VarType_TensorDesc() {
    *this = ::std::move(from);
  }

  inline VarType_TensorDesc& operator=(const VarType_TensorDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType_TensorDesc& operator=(VarType_TensorDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType_TensorDesc& default_instance();

  static inline const VarType_TensorDesc* internal_default_instance() {
    return reinterpret_cast<const VarType_TensorDesc*>(
               &_VarType_TensorDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VarType_TensorDesc& a, VarType_TensorDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType_TensorDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType_TensorDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType_TensorDesc* New() const final {
    return CreateMaybeMessage<VarType_TensorDesc>(nullptr);
  }

  VarType_TensorDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType_TensorDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType_TensorDesc& from);
  void MergeFrom(const VarType_TensorDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType_TensorDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType.TensorDesc";
  }
  protected:
  explicit VarType_TensorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsFieldNumber = 2,
    kDataTypeFieldNumber = 1,
  };
  // repeated int64 dims = 2;
  int dims_size() const;
  private:
  int _internal_dims_size() const;
  public:
  void clear_dims();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dims(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_dims() const;
  void _internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_dims();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 dims(int index) const;
  void set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_dims(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      dims() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_dims();

  // required .paddle.framework.proto.VarType.Type data_type = 1;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  ::paddle::framework::proto::VarType_Type data_type() const;
  void set_data_type(::paddle::framework::proto::VarType_Type value);
  private:
  ::paddle::framework::proto::VarType_Type _internal_data_type() const;
  void _internal_set_data_type(::paddle::framework::proto::VarType_Type value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType.TensorDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > dims_;
  int data_type_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType_LoDTensorDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType.LoDTensorDesc) */ {
 public:
  inline VarType_LoDTensorDesc() : VarType_LoDTensorDesc(nullptr) {}
  virtual ~VarType_LoDTensorDesc();

  VarType_LoDTensorDesc(const VarType_LoDTensorDesc& from);
  VarType_LoDTensorDesc(VarType_LoDTensorDesc&& from) noexcept
    : VarType_LoDTensorDesc() {
    *this = ::std::move(from);
  }

  inline VarType_LoDTensorDesc& operator=(const VarType_LoDTensorDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType_LoDTensorDesc& operator=(VarType_LoDTensorDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType_LoDTensorDesc& default_instance();

  static inline const VarType_LoDTensorDesc* internal_default_instance() {
    return reinterpret_cast<const VarType_LoDTensorDesc*>(
               &_VarType_LoDTensorDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VarType_LoDTensorDesc& a, VarType_LoDTensorDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType_LoDTensorDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType_LoDTensorDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType_LoDTensorDesc* New() const final {
    return CreateMaybeMessage<VarType_LoDTensorDesc>(nullptr);
  }

  VarType_LoDTensorDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType_LoDTensorDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType_LoDTensorDesc& from);
  void MergeFrom(const VarType_LoDTensorDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType_LoDTensorDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType.LoDTensorDesc";
  }
  protected:
  explicit VarType_LoDTensorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
    kLodLevelFieldNumber = 2,
  };
  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::paddle::framework::proto::VarType_TensorDesc& tensor() const;
  ::paddle::framework::proto::VarType_TensorDesc* release_tensor();
  ::paddle::framework::proto::VarType_TensorDesc* mutable_tensor();
  void set_allocated_tensor(::paddle::framework::proto::VarType_TensorDesc* tensor);
  private:
  const ::paddle::framework::proto::VarType_TensorDesc& _internal_tensor() const;
  ::paddle::framework::proto::VarType_TensorDesc* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::paddle::framework::proto::VarType_TensorDesc* tensor);
  ::paddle::framework::proto::VarType_TensorDesc* unsafe_arena_release_tensor();

  // optional int32 lod_level = 2 [default = 0];
  bool has_lod_level() const;
  private:
  bool _internal_has_lod_level() const;
  public:
  void clear_lod_level();
  ::PROTOBUF_NAMESPACE_ID::int32 lod_level() const;
  void set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lod_level() const;
  void _internal_set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType.LoDTensorDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::paddle::framework::proto::VarType_TensorDesc* tensor_;
  ::PROTOBUF_NAMESPACE_ID::int32 lod_level_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType_LoDTensorArrayDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType.LoDTensorArrayDesc) */ {
 public:
  inline VarType_LoDTensorArrayDesc() : VarType_LoDTensorArrayDesc(nullptr) {}
  virtual ~VarType_LoDTensorArrayDesc();

  VarType_LoDTensorArrayDesc(const VarType_LoDTensorArrayDesc& from);
  VarType_LoDTensorArrayDesc(VarType_LoDTensorArrayDesc&& from) noexcept
    : VarType_LoDTensorArrayDesc() {
    *this = ::std::move(from);
  }

  inline VarType_LoDTensorArrayDesc& operator=(const VarType_LoDTensorArrayDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType_LoDTensorArrayDesc& operator=(VarType_LoDTensorArrayDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType_LoDTensorArrayDesc& default_instance();

  static inline const VarType_LoDTensorArrayDesc* internal_default_instance() {
    return reinterpret_cast<const VarType_LoDTensorArrayDesc*>(
               &_VarType_LoDTensorArrayDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VarType_LoDTensorArrayDesc& a, VarType_LoDTensorArrayDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType_LoDTensorArrayDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType_LoDTensorArrayDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType_LoDTensorArrayDesc* New() const final {
    return CreateMaybeMessage<VarType_LoDTensorArrayDesc>(nullptr);
  }

  VarType_LoDTensorArrayDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType_LoDTensorArrayDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType_LoDTensorArrayDesc& from);
  void MergeFrom(const VarType_LoDTensorArrayDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType_LoDTensorArrayDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType.LoDTensorArrayDesc";
  }
  protected:
  explicit VarType_LoDTensorArrayDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTensorFieldNumber = 1,
    kLodLevelFieldNumber = 2,
  };
  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  bool has_tensor() const;
  private:
  bool _internal_has_tensor() const;
  public:
  void clear_tensor();
  const ::paddle::framework::proto::VarType_TensorDesc& tensor() const;
  ::paddle::framework::proto::VarType_TensorDesc* release_tensor();
  ::paddle::framework::proto::VarType_TensorDesc* mutable_tensor();
  void set_allocated_tensor(::paddle::framework::proto::VarType_TensorDesc* tensor);
  private:
  const ::paddle::framework::proto::VarType_TensorDesc& _internal_tensor() const;
  ::paddle::framework::proto::VarType_TensorDesc* _internal_mutable_tensor();
  public:
  void unsafe_arena_set_allocated_tensor(
      ::paddle::framework::proto::VarType_TensorDesc* tensor);
  ::paddle::framework::proto::VarType_TensorDesc* unsafe_arena_release_tensor();

  // optional int32 lod_level = 2 [default = 0];
  bool has_lod_level() const;
  private:
  bool _internal_has_lod_level() const;
  public:
  void clear_lod_level();
  ::PROTOBUF_NAMESPACE_ID::int32 lod_level() const;
  void set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_lod_level() const;
  void _internal_set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType.LoDTensorArrayDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::paddle::framework::proto::VarType_TensorDesc* tensor_;
  ::PROTOBUF_NAMESPACE_ID::int32 lod_level_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType_ReaderDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType.ReaderDesc) */ {
 public:
  inline VarType_ReaderDesc() : VarType_ReaderDesc(nullptr) {}
  virtual ~VarType_ReaderDesc();

  VarType_ReaderDesc(const VarType_ReaderDesc& from);
  VarType_ReaderDesc(VarType_ReaderDesc&& from) noexcept
    : VarType_ReaderDesc() {
    *this = ::std::move(from);
  }

  inline VarType_ReaderDesc& operator=(const VarType_ReaderDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType_ReaderDesc& operator=(VarType_ReaderDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType_ReaderDesc& default_instance();

  static inline const VarType_ReaderDesc* internal_default_instance() {
    return reinterpret_cast<const VarType_ReaderDesc*>(
               &_VarType_ReaderDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VarType_ReaderDesc& a, VarType_ReaderDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType_ReaderDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType_ReaderDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType_ReaderDesc* New() const final {
    return CreateMaybeMessage<VarType_ReaderDesc>(nullptr);
  }

  VarType_ReaderDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType_ReaderDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType_ReaderDesc& from);
  void MergeFrom(const VarType_ReaderDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType_ReaderDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType.ReaderDesc";
  }
  protected:
  explicit VarType_ReaderDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLodTensorFieldNumber = 1,
  };
  // repeated .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 1;
  int lod_tensor_size() const;
  private:
  int _internal_lod_tensor_size() const;
  public:
  void clear_lod_tensor();
  ::paddle::framework::proto::VarType_LoDTensorDesc* mutable_lod_tensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarType_LoDTensorDesc >*
      mutable_lod_tensor();
  private:
  const ::paddle::framework::proto::VarType_LoDTensorDesc& _internal_lod_tensor(int index) const;
  ::paddle::framework::proto::VarType_LoDTensorDesc* _internal_add_lod_tensor();
  public:
  const ::paddle::framework::proto::VarType_LoDTensorDesc& lod_tensor(int index) const;
  ::paddle::framework::proto::VarType_LoDTensorDesc* add_lod_tensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarType_LoDTensorDesc >&
      lod_tensor() const;

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType.ReaderDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarType_LoDTensorDesc > lod_tensor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType_Tuple PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType.Tuple) */ {
 public:
  inline VarType_Tuple() : VarType_Tuple(nullptr) {}
  virtual ~VarType_Tuple();

  VarType_Tuple(const VarType_Tuple& from);
  VarType_Tuple(VarType_Tuple&& from) noexcept
    : VarType_Tuple() {
    *this = ::std::move(from);
  }

  inline VarType_Tuple& operator=(const VarType_Tuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType_Tuple& operator=(VarType_Tuple&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType_Tuple& default_instance();

  static inline const VarType_Tuple* internal_default_instance() {
    return reinterpret_cast<const VarType_Tuple*>(
               &_VarType_Tuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VarType_Tuple& a, VarType_Tuple& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType_Tuple* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType_Tuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType_Tuple* New() const final {
    return CreateMaybeMessage<VarType_Tuple>(nullptr);
  }

  VarType_Tuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType_Tuple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType_Tuple& from);
  void MergeFrom(const VarType_Tuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType_Tuple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType.Tuple";
  }
  protected:
  explicit VarType_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementTypeFieldNumber = 1,
  };
  // repeated .paddle.framework.proto.VarType.Type element_type = 1;
  int element_type_size() const;
  private:
  int _internal_element_type_size() const;
  public:
  void clear_element_type();
  private:
  ::paddle::framework::proto::VarType_Type _internal_element_type(int index) const;
  void _internal_add_element_type(::paddle::framework::proto::VarType_Type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_element_type();
  public:
  ::paddle::framework::proto::VarType_Type element_type(int index) const;
  void set_element_type(int index, ::paddle::framework::proto::VarType_Type value);
  void add_element_type(::paddle::framework::proto::VarType_Type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& element_type() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_element_type();

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType.Tuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> element_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarType PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarType) */ {
 public:
  inline VarType() : VarType(nullptr) {}
  virtual ~VarType();

  VarType(const VarType& from);
  VarType(VarType&& from) noexcept
    : VarType() {
    *this = ::std::move(from);
  }

  inline VarType& operator=(const VarType& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarType& operator=(VarType&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarType& default_instance();

  static inline const VarType* internal_default_instance() {
    return reinterpret_cast<const VarType*>(
               &_VarType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VarType& a, VarType& b) {
    a.Swap(&b);
  }
  inline void Swap(VarType* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarType* New() const final {
    return CreateMaybeMessage<VarType>(nullptr);
  }

  VarType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarType& from);
  void MergeFrom(const VarType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarType";
  }
  protected:
  explicit VarType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef VarType_TensorDesc TensorDesc;
  typedef VarType_LoDTensorDesc LoDTensorDesc;
  typedef VarType_LoDTensorArrayDesc LoDTensorArrayDesc;
  typedef VarType_ReaderDesc ReaderDesc;
  typedef VarType_Tuple Tuple;

  typedef VarType_Type Type;
  static constexpr Type BOOL =
    VarType_Type_BOOL;
  static constexpr Type INT16 =
    VarType_Type_INT16;
  static constexpr Type INT32 =
    VarType_Type_INT32;
  static constexpr Type INT64 =
    VarType_Type_INT64;
  static constexpr Type FP16 =
    VarType_Type_FP16;
  static constexpr Type FP32 =
    VarType_Type_FP32;
  static constexpr Type FP64 =
    VarType_Type_FP64;
  static constexpr Type SIZE_T =
    VarType_Type_SIZE_T;
  static constexpr Type UINT8 =
    VarType_Type_UINT8;
  static constexpr Type INT8 =
    VarType_Type_INT8;
  static constexpr Type BF16 =
    VarType_Type_BF16;
  static constexpr Type COMPLEX64 =
    VarType_Type_COMPLEX64;
  static constexpr Type COMPLEX128 =
    VarType_Type_COMPLEX128;
  static constexpr Type LOD_TENSOR =
    VarType_Type_LOD_TENSOR;
  static constexpr Type SELECTED_ROWS =
    VarType_Type_SELECTED_ROWS;
  static constexpr Type FEED_MINIBATCH =
    VarType_Type_FEED_MINIBATCH;
  static constexpr Type FETCH_LIST =
    VarType_Type_FETCH_LIST;
  static constexpr Type STEP_SCOPES =
    VarType_Type_STEP_SCOPES;
  static constexpr Type LOD_RANK_TABLE =
    VarType_Type_LOD_RANK_TABLE;
  static constexpr Type LOD_TENSOR_ARRAY =
    VarType_Type_LOD_TENSOR_ARRAY;
  static constexpr Type PLACE_LIST =
    VarType_Type_PLACE_LIST;
  static constexpr Type READER =
    VarType_Type_READER;
  static constexpr Type RAW =
    VarType_Type_RAW;
  static constexpr Type TUPLE =
    VarType_Type_TUPLE;
  static inline bool Type_IsValid(int value) {
    return VarType_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    VarType_Type_Type_MIN;
  static constexpr Type Type_MAX =
    VarType_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    VarType_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return VarType_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return VarType_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return VarType_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSelectedRowsFieldNumber = 2,
    kLodTensorFieldNumber = 3,
    kTensorArrayFieldNumber = 4,
    kReaderFieldNumber = 5,
    kTupleFieldNumber = 7,
    kTypeFieldNumber = 1,
  };
  // optional .paddle.framework.proto.VarType.TensorDesc selected_rows = 2;
  bool has_selected_rows() const;
  private:
  bool _internal_has_selected_rows() const;
  public:
  void clear_selected_rows();
  const ::paddle::framework::proto::VarType_TensorDesc& selected_rows() const;
  ::paddle::framework::proto::VarType_TensorDesc* release_selected_rows();
  ::paddle::framework::proto::VarType_TensorDesc* mutable_selected_rows();
  void set_allocated_selected_rows(::paddle::framework::proto::VarType_TensorDesc* selected_rows);
  private:
  const ::paddle::framework::proto::VarType_TensorDesc& _internal_selected_rows() const;
  ::paddle::framework::proto::VarType_TensorDesc* _internal_mutable_selected_rows();
  public:
  void unsafe_arena_set_allocated_selected_rows(
      ::paddle::framework::proto::VarType_TensorDesc* selected_rows);
  ::paddle::framework::proto::VarType_TensorDesc* unsafe_arena_release_selected_rows();

  // optional .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 3;
  bool has_lod_tensor() const;
  private:
  bool _internal_has_lod_tensor() const;
  public:
  void clear_lod_tensor();
  const ::paddle::framework::proto::VarType_LoDTensorDesc& lod_tensor() const;
  ::paddle::framework::proto::VarType_LoDTensorDesc* release_lod_tensor();
  ::paddle::framework::proto::VarType_LoDTensorDesc* mutable_lod_tensor();
  void set_allocated_lod_tensor(::paddle::framework::proto::VarType_LoDTensorDesc* lod_tensor);
  private:
  const ::paddle::framework::proto::VarType_LoDTensorDesc& _internal_lod_tensor() const;
  ::paddle::framework::proto::VarType_LoDTensorDesc* _internal_mutable_lod_tensor();
  public:
  void unsafe_arena_set_allocated_lod_tensor(
      ::paddle::framework::proto::VarType_LoDTensorDesc* lod_tensor);
  ::paddle::framework::proto::VarType_LoDTensorDesc* unsafe_arena_release_lod_tensor();

  // optional .paddle.framework.proto.VarType.LoDTensorArrayDesc tensor_array = 4;
  bool has_tensor_array() const;
  private:
  bool _internal_has_tensor_array() const;
  public:
  void clear_tensor_array();
  const ::paddle::framework::proto::VarType_LoDTensorArrayDesc& tensor_array() const;
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* release_tensor_array();
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* mutable_tensor_array();
  void set_allocated_tensor_array(::paddle::framework::proto::VarType_LoDTensorArrayDesc* tensor_array);
  private:
  const ::paddle::framework::proto::VarType_LoDTensorArrayDesc& _internal_tensor_array() const;
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* _internal_mutable_tensor_array();
  public:
  void unsafe_arena_set_allocated_tensor_array(
      ::paddle::framework::proto::VarType_LoDTensorArrayDesc* tensor_array);
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* unsafe_arena_release_tensor_array();

  // optional .paddle.framework.proto.VarType.ReaderDesc reader = 5;
  bool has_reader() const;
  private:
  bool _internal_has_reader() const;
  public:
  void clear_reader();
  const ::paddle::framework::proto::VarType_ReaderDesc& reader() const;
  ::paddle::framework::proto::VarType_ReaderDesc* release_reader();
  ::paddle::framework::proto::VarType_ReaderDesc* mutable_reader();
  void set_allocated_reader(::paddle::framework::proto::VarType_ReaderDesc* reader);
  private:
  const ::paddle::framework::proto::VarType_ReaderDesc& _internal_reader() const;
  ::paddle::framework::proto::VarType_ReaderDesc* _internal_mutable_reader();
  public:
  void unsafe_arena_set_allocated_reader(
      ::paddle::framework::proto::VarType_ReaderDesc* reader);
  ::paddle::framework::proto::VarType_ReaderDesc* unsafe_arena_release_reader();

  // optional .paddle.framework.proto.VarType.Tuple tuple = 7;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::paddle::framework::proto::VarType_Tuple& tuple() const;
  ::paddle::framework::proto::VarType_Tuple* release_tuple();
  ::paddle::framework::proto::VarType_Tuple* mutable_tuple();
  void set_allocated_tuple(::paddle::framework::proto::VarType_Tuple* tuple);
  private:
  const ::paddle::framework::proto::VarType_Tuple& _internal_tuple() const;
  ::paddle::framework::proto::VarType_Tuple* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::paddle::framework::proto::VarType_Tuple* tuple);
  ::paddle::framework::proto::VarType_Tuple* unsafe_arena_release_tuple();

  // required .paddle.framework.proto.VarType.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::paddle::framework::proto::VarType_Type type() const;
  void set_type(::paddle::framework::proto::VarType_Type value);
  private:
  ::paddle::framework::proto::VarType_Type _internal_type() const;
  void _internal_set_type(::paddle::framework::proto::VarType_Type value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::paddle::framework::proto::VarType_TensorDesc* selected_rows_;
  ::paddle::framework::proto::VarType_LoDTensorDesc* lod_tensor_;
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* tensor_array_;
  ::paddle::framework::proto::VarType_ReaderDesc* reader_;
  ::paddle::framework::proto::VarType_Tuple* tuple_;
  int type_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class VarDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.VarDesc) */ {
 public:
  inline VarDesc() : VarDesc(nullptr) {}
  virtual ~VarDesc();

  VarDesc(const VarDesc& from);
  VarDesc(VarDesc&& from) noexcept
    : VarDesc() {
    *this = ::std::move(from);
  }

  inline VarDesc& operator=(const VarDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline VarDesc& operator=(VarDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VarDesc& default_instance();

  static inline const VarDesc* internal_default_instance() {
    return reinterpret_cast<const VarDesc*>(
               &_VarDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VarDesc& a, VarDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(VarDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VarDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VarDesc* New() const final {
    return CreateMaybeMessage<VarDesc>(nullptr);
  }

  VarDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VarDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VarDesc& from);
  void MergeFrom(const VarDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VarDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.VarDesc";
  }
  protected:
  explicit VarDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kPersistableFieldNumber = 3,
    kNeedCheckFeedFieldNumber = 4,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required .paddle.framework.proto.VarType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::paddle::framework::proto::VarType& type() const;
  ::paddle::framework::proto::VarType* release_type();
  ::paddle::framework::proto::VarType* mutable_type();
  void set_allocated_type(::paddle::framework::proto::VarType* type);
  private:
  const ::paddle::framework::proto::VarType& _internal_type() const;
  ::paddle::framework::proto::VarType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::paddle::framework::proto::VarType* type);
  ::paddle::framework::proto::VarType* unsafe_arena_release_type();

  // optional bool persistable = 3 [default = false];
  bool has_persistable() const;
  private:
  bool _internal_has_persistable() const;
  public:
  void clear_persistable();
  bool persistable() const;
  void set_persistable(bool value);
  private:
  bool _internal_persistable() const;
  void _internal_set_persistable(bool value);
  public:

  // optional bool need_check_feed = 4 [default = false];
  bool has_need_check_feed() const;
  private:
  bool _internal_has_need_check_feed() const;
  public:
  void clear_need_check_feed();
  bool need_check_feed() const;
  void set_need_check_feed(bool value);
  private:
  bool _internal_need_check_feed() const;
  void _internal_set_need_check_feed(bool value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.VarDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::paddle::framework::proto::VarType* type_;
  bool persistable_;
  bool need_check_feed_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class BlockDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.BlockDesc) */ {
 public:
  inline BlockDesc() : BlockDesc(nullptr) {}
  virtual ~BlockDesc();

  BlockDesc(const BlockDesc& from);
  BlockDesc(BlockDesc&& from) noexcept
    : BlockDesc() {
    *this = ::std::move(from);
  }

  inline BlockDesc& operator=(const BlockDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDesc& operator=(BlockDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockDesc& default_instance();

  static inline const BlockDesc* internal_default_instance() {
    return reinterpret_cast<const BlockDesc*>(
               &_BlockDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BlockDesc& a, BlockDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockDesc* New() const final {
    return CreateMaybeMessage<BlockDesc>(nullptr);
  }

  BlockDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockDesc& from);
  void MergeFrom(const BlockDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.BlockDesc";
  }
  protected:
  explicit BlockDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 3,
    kOpsFieldNumber = 4,
    kIdxFieldNumber = 1,
    kParentIdxFieldNumber = 2,
    kForwardBlockIdxFieldNumber = 5,
  };
  // repeated .paddle.framework.proto.VarDesc vars = 3;
  int vars_size() const;
  private:
  int _internal_vars_size() const;
  public:
  void clear_vars();
  ::paddle::framework::proto::VarDesc* mutable_vars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarDesc >*
      mutable_vars();
  private:
  const ::paddle::framework::proto::VarDesc& _internal_vars(int index) const;
  ::paddle::framework::proto::VarDesc* _internal_add_vars();
  public:
  const ::paddle::framework::proto::VarDesc& vars(int index) const;
  ::paddle::framework::proto::VarDesc* add_vars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarDesc >&
      vars() const;

  // repeated .paddle.framework.proto.OpDesc ops = 4;
  int ops_size() const;
  private:
  int _internal_ops_size() const;
  public:
  void clear_ops();
  ::paddle::framework::proto::OpDesc* mutable_ops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc >*
      mutable_ops();
  private:
  const ::paddle::framework::proto::OpDesc& _internal_ops(int index) const;
  ::paddle::framework::proto::OpDesc* _internal_add_ops();
  public:
  const ::paddle::framework::proto::OpDesc& ops(int index) const;
  ::paddle::framework::proto::OpDesc* add_ops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc >&
      ops() const;

  // required int32 idx = 1;
  bool has_idx() const;
  private:
  bool _internal_has_idx() const;
  public:
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 parent_idx = 2;
  bool has_parent_idx() const;
  private:
  bool _internal_has_parent_idx() const;
  public:
  void clear_parent_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 parent_idx() const;
  void set_parent_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_parent_idx() const;
  void _internal_set_parent_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 forward_block_idx = 5 [default = -1];
  bool has_forward_block_idx() const;
  private:
  bool _internal_has_forward_block_idx() const;
  public:
  void clear_forward_block_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 forward_block_idx() const;
  void set_forward_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_forward_block_idx() const;
  void _internal_set_forward_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.BlockDesc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarDesc > vars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc > ops_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 parent_idx_;
  ::PROTOBUF_NAMESPACE_ID::int32 forward_block_idx_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpVersion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpVersion) */ {
 public:
  inline OpVersion() : OpVersion(nullptr) {}
  virtual ~OpVersion();

  OpVersion(const OpVersion& from);
  OpVersion(OpVersion&& from) noexcept
    : OpVersion() {
    *this = ::std::move(from);
  }

  inline OpVersion& operator=(const OpVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpVersion& operator=(OpVersion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpVersion& default_instance();

  static inline const OpVersion* internal_default_instance() {
    return reinterpret_cast<const OpVersion*>(
               &_OpVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OpVersion& a, OpVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(OpVersion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpVersion* New() const final {
    return CreateMaybeMessage<OpVersion>(nullptr);
  }

  OpVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpVersion& from);
  void MergeFrom(const OpVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpVersion";
  }
  protected:
  explicit OpVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
  };
  // required int32 version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::int32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 version_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpVersionMap_OpVersionPair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpVersionMap.OpVersionPair) */ {
 public:
  inline OpVersionMap_OpVersionPair() : OpVersionMap_OpVersionPair(nullptr) {}
  virtual ~OpVersionMap_OpVersionPair();

  OpVersionMap_OpVersionPair(const OpVersionMap_OpVersionPair& from);
  OpVersionMap_OpVersionPair(OpVersionMap_OpVersionPair&& from) noexcept
    : OpVersionMap_OpVersionPair() {
    *this = ::std::move(from);
  }

  inline OpVersionMap_OpVersionPair& operator=(const OpVersionMap_OpVersionPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpVersionMap_OpVersionPair& operator=(OpVersionMap_OpVersionPair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpVersionMap_OpVersionPair& default_instance();

  static inline const OpVersionMap_OpVersionPair* internal_default_instance() {
    return reinterpret_cast<const OpVersionMap_OpVersionPair*>(
               &_OpVersionMap_OpVersionPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(OpVersionMap_OpVersionPair& a, OpVersionMap_OpVersionPair& b) {
    a.Swap(&b);
  }
  inline void Swap(OpVersionMap_OpVersionPair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpVersionMap_OpVersionPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpVersionMap_OpVersionPair* New() const final {
    return CreateMaybeMessage<OpVersionMap_OpVersionPair>(nullptr);
  }

  OpVersionMap_OpVersionPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpVersionMap_OpVersionPair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpVersionMap_OpVersionPair& from);
  void MergeFrom(const OpVersionMap_OpVersionPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpVersionMap_OpVersionPair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpVersionMap.OpVersionPair";
  }
  protected:
  explicit OpVersionMap_OpVersionPair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpNameFieldNumber = 1,
    kOpVersionFieldNumber = 2,
  };
  // required string op_name = 1;
  bool has_op_name() const;
  private:
  bool _internal_has_op_name() const;
  public:
  void clear_op_name();
  const std::string& op_name() const;
  void set_op_name(const std::string& value);
  void set_op_name(std::string&& value);
  void set_op_name(const char* value);
  void set_op_name(const char* value, size_t size);
  std::string* mutable_op_name();
  std::string* release_op_name();
  void set_allocated_op_name(std::string* op_name);
  private:
  const std::string& _internal_op_name() const;
  void _internal_set_op_name(const std::string& value);
  std::string* _internal_mutable_op_name();
  public:

  // required .paddle.framework.proto.OpVersion op_version = 2;
  bool has_op_version() const;
  private:
  bool _internal_has_op_version() const;
  public:
  void clear_op_version();
  const ::paddle::framework::proto::OpVersion& op_version() const;
  ::paddle::framework::proto::OpVersion* release_op_version();
  ::paddle::framework::proto::OpVersion* mutable_op_version();
  void set_allocated_op_version(::paddle::framework::proto::OpVersion* op_version);
  private:
  const ::paddle::framework::proto::OpVersion& _internal_op_version() const;
  ::paddle::framework::proto::OpVersion* _internal_mutable_op_version();
  public:
  void unsafe_arena_set_allocated_op_version(
      ::paddle::framework::proto::OpVersion* op_version);
  ::paddle::framework::proto::OpVersion* unsafe_arena_release_op_version();

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpVersionMap.OpVersionPair)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_name_;
  ::paddle::framework::proto::OpVersion* op_version_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class OpVersionMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.OpVersionMap) */ {
 public:
  inline OpVersionMap() : OpVersionMap(nullptr) {}
  virtual ~OpVersionMap();

  OpVersionMap(const OpVersionMap& from);
  OpVersionMap(OpVersionMap&& from) noexcept
    : OpVersionMap() {
    *this = ::std::move(from);
  }

  inline OpVersionMap& operator=(const OpVersionMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline OpVersionMap& operator=(OpVersionMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OpVersionMap& default_instance();

  static inline const OpVersionMap* internal_default_instance() {
    return reinterpret_cast<const OpVersionMap*>(
               &_OpVersionMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OpVersionMap& a, OpVersionMap& b) {
    a.Swap(&b);
  }
  inline void Swap(OpVersionMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OpVersionMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OpVersionMap* New() const final {
    return CreateMaybeMessage<OpVersionMap>(nullptr);
  }

  OpVersionMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OpVersionMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OpVersionMap& from);
  void MergeFrom(const OpVersionMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpVersionMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.OpVersionMap";
  }
  protected:
  explicit OpVersionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef OpVersionMap_OpVersionPair OpVersionPair;

  // accessors -------------------------------------------------------

  enum : int {
    kPairFieldNumber = 1,
  };
  // repeated .paddle.framework.proto.OpVersionMap.OpVersionPair pair = 1;
  int pair_size() const;
  private:
  int _internal_pair_size() const;
  public:
  void clear_pair();
  ::paddle::framework::proto::OpVersionMap_OpVersionPair* mutable_pair(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpVersionMap_OpVersionPair >*
      mutable_pair();
  private:
  const ::paddle::framework::proto::OpVersionMap_OpVersionPair& _internal_pair(int index) const;
  ::paddle::framework::proto::OpVersionMap_OpVersionPair* _internal_add_pair();
  public:
  const ::paddle::framework::proto::OpVersionMap_OpVersionPair& pair(int index) const;
  ::paddle::framework::proto::OpVersionMap_OpVersionPair* add_pair();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpVersionMap_OpVersionPair >&
      pair() const;

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.OpVersionMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpVersionMap_OpVersionPair > pair_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_framework_2eproto;
};
// -------------------------------------------------------------------

class ProgramDesc PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:paddle.framework.proto.ProgramDesc) */ {
 public:
  inline ProgramDesc() : ProgramDesc(nullptr) {}
  virtual ~ProgramDesc();

  ProgramDesc(const ProgramDesc& from);
  ProgramDesc(ProgramDesc&& from) noexcept
    : ProgramDesc() {
    *this = ::std::move(from);
  }

  inline ProgramDesc& operator=(const ProgramDesc& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProgramDesc& operator=(ProgramDesc&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProgramDesc& default_instance();

  static inline const ProgramDesc* internal_default_instance() {
    return reinterpret_cast<const ProgramDesc*>(
               &_ProgramDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ProgramDesc& a, ProgramDesc& b) {
    a.Swap(&b);
  }
  inline void Swap(ProgramDesc* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProgramDesc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProgramDesc* New() const final {
    return CreateMaybeMessage<ProgramDesc>(nullptr);
  }

  ProgramDesc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProgramDesc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProgramDesc& from);
  void MergeFrom(const ProgramDesc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProgramDesc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "paddle.framework.proto.ProgramDesc";
  }
  protected:
  explicit ProgramDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_framework_2eproto);
    return ::descriptor_table_framework_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 1,
    kVersionFieldNumber = 4,
    kOpVersionMapFieldNumber = 5,
  };
  // repeated .paddle.framework.proto.BlockDesc blocks = 1;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::paddle::framework::proto::BlockDesc* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::BlockDesc >*
      mutable_blocks();
  private:
  const ::paddle::framework::proto::BlockDesc& _internal_blocks(int index) const;
  ::paddle::framework::proto::BlockDesc* _internal_add_blocks();
  public:
  const ::paddle::framework::proto::BlockDesc& blocks(int index) const;
  ::paddle::framework::proto::BlockDesc* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::BlockDesc >&
      blocks() const;

  // optional .paddle.framework.proto.Version version = 4;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::paddle::framework::proto::Version& version() const;
  ::paddle::framework::proto::Version* release_version();
  ::paddle::framework::proto::Version* mutable_version();
  void set_allocated_version(::paddle::framework::proto::Version* version);
  private:
  const ::paddle::framework::proto::Version& _internal_version() const;
  ::paddle::framework::proto::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::paddle::framework::proto::Version* version);
  ::paddle::framework::proto::Version* unsafe_arena_release_version();

  // optional .paddle.framework.proto.OpVersionMap op_version_map = 5;
  bool has_op_version_map() const;
  private:
  bool _internal_has_op_version_map() const;
  public:
  void clear_op_version_map();
  const ::paddle::framework::proto::OpVersionMap& op_version_map() const;
  ::paddle::framework::proto::OpVersionMap* release_op_version_map();
  ::paddle::framework::proto::OpVersionMap* mutable_op_version_map();
  void set_allocated_op_version_map(::paddle::framework::proto::OpVersionMap* op_version_map);
  private:
  const ::paddle::framework::proto::OpVersionMap& _internal_op_version_map() const;
  ::paddle::framework::proto::OpVersionMap* _internal_mutable_op_version_map();
  public:
  void unsafe_arena_set_allocated_op_version_map(
      ::paddle::framework::proto::OpVersionMap* op_version_map);
  ::paddle::framework::proto::OpVersionMap* unsafe_arena_release_op_version_map();

  // @@protoc_insertion_point(class_scope:paddle.framework.proto.ProgramDesc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::BlockDesc > blocks_;
  ::paddle::framework::proto::Version* version_;
  ::paddle::framework::proto::OpVersionMap* op_version_map_;
  friend struct ::TableStruct_framework_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Version

// optional int64 version = 1 [default = 0];
inline bool Version::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Version::has_version() const {
  return _internal_has_version();
}
inline void Version::clear_version() {
  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Version::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Version::version() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.Version.version)
  return _internal_version();
}
inline void Version::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void Version::set_version(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.Version.version)
}

// -------------------------------------------------------------------

// OpDesc_Attr

// required string name = 1;
inline bool OpDesc_Attr::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_name() const {
  return _internal_has_name();
}
inline void OpDesc_Attr::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpDesc_Attr::name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.name)
  return _internal_name();
}
inline void OpDesc_Attr::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.name)
}
inline std::string* OpDesc_Attr::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.Attr.name)
  return _internal_mutable_name();
}
inline const std::string& OpDesc_Attr::_internal_name() const {
  return name_.Get();
}
inline void OpDesc_Attr::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpDesc_Attr::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpDesc.Attr.name)
}
inline void OpDesc_Attr::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.Attr.name)
}
inline void OpDesc_Attr::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.Attr.name)
}
inline std::string* OpDesc_Attr::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpDesc_Attr::release_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpDesc.Attr.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDesc_Attr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpDesc.Attr.name)
}

// required .paddle.framework.proto.AttrType type = 2;
inline bool OpDesc_Attr::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_type() const {
  return _internal_has_type();
}
inline void OpDesc_Attr::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::paddle::framework::proto::AttrType OpDesc_Attr::_internal_type() const {
  return static_cast< ::paddle::framework::proto::AttrType >(type_);
}
inline ::paddle::framework::proto::AttrType OpDesc_Attr::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.type)
  return _internal_type();
}
inline void OpDesc_Attr::_internal_set_type(::paddle::framework::proto::AttrType value) {
  assert(::paddle::framework::proto::AttrType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void OpDesc_Attr::set_type(::paddle::framework::proto::AttrType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.type)
}

// optional int32 i = 3;
inline bool OpDesc_Attr::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_i() const {
  return _internal_has_i();
}
inline void OpDesc_Attr::clear_i() {
  i_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::_internal_i() const {
  return i_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::i() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.i)
  return _internal_i();
}
inline void OpDesc_Attr::_internal_set_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  i_ = value;
}
inline void OpDesc_Attr::set_i(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.i)
}

// optional float f = 4;
inline bool OpDesc_Attr::_internal_has_f() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_f() const {
  return _internal_has_f();
}
inline void OpDesc_Attr::clear_f() {
  f_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float OpDesc_Attr::_internal_f() const {
  return f_;
}
inline float OpDesc_Attr::f() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.f)
  return _internal_f();
}
inline void OpDesc_Attr::_internal_set_f(float value) {
  _has_bits_[0] |= 0x00000010u;
  f_ = value;
}
inline void OpDesc_Attr::set_f(float value) {
  _internal_set_f(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.f)
}

// optional string s = 5;
inline bool OpDesc_Attr::_internal_has_s() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_s() const {
  return _internal_has_s();
}
inline void OpDesc_Attr::clear_s() {
  s_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpDesc_Attr::s() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.s)
  return _internal_s();
}
inline void OpDesc_Attr::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.s)
}
inline std::string* OpDesc_Attr::mutable_s() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.Attr.s)
  return _internal_mutable_s();
}
inline const std::string& OpDesc_Attr::_internal_s() const {
  return s_.Get();
}
inline void OpDesc_Attr::_internal_set_s(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpDesc_Attr::set_s(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  s_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpDesc.Attr.s)
}
inline void OpDesc_Attr::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.Attr.s)
}
inline void OpDesc_Attr::set_s(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.Attr.s)
}
inline std::string* OpDesc_Attr::_internal_mutable_s() {
  _has_bits_[0] |= 0x00000002u;
  return s_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpDesc_Attr::release_s() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpDesc.Attr.s)
  if (!_internal_has_s()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return s_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDesc_Attr::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  s_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpDesc.Attr.s)
}

// repeated int32 ints = 6;
inline int OpDesc_Attr::_internal_ints_size() const {
  return ints_.size();
}
inline int OpDesc_Attr::ints_size() const {
  return _internal_ints_size();
}
inline void OpDesc_Attr::clear_ints() {
  ints_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::_internal_ints(int index) const {
  return ints_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::ints(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.ints)
  return _internal_ints(index);
}
inline void OpDesc_Attr::set_ints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  ints_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.ints)
}
inline void OpDesc_Attr::_internal_add_ints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  ints_.Add(value);
}
inline void OpDesc_Attr::add_ints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_ints(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.ints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDesc_Attr::_internal_ints() const {
  return ints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDesc_Attr::ints() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.ints)
  return _internal_ints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDesc_Attr::_internal_mutable_ints() {
  return &ints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDesc_Attr::mutable_ints() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.ints)
  return _internal_mutable_ints();
}

// repeated float floats = 7;
inline int OpDesc_Attr::_internal_floats_size() const {
  return floats_.size();
}
inline int OpDesc_Attr::floats_size() const {
  return _internal_floats_size();
}
inline void OpDesc_Attr::clear_floats() {
  floats_.Clear();
}
inline float OpDesc_Attr::_internal_floats(int index) const {
  return floats_.Get(index);
}
inline float OpDesc_Attr::floats(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.floats)
  return _internal_floats(index);
}
inline void OpDesc_Attr::set_floats(int index, float value) {
  floats_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.floats)
}
inline void OpDesc_Attr::_internal_add_floats(float value) {
  floats_.Add(value);
}
inline void OpDesc_Attr::add_floats(float value) {
  _internal_add_floats(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.floats)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpDesc_Attr::_internal_floats() const {
  return floats_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
OpDesc_Attr::floats() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.floats)
  return _internal_floats();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpDesc_Attr::_internal_mutable_floats() {
  return &floats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
OpDesc_Attr::mutable_floats() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.floats)
  return _internal_mutable_floats();
}

// repeated string strings = 8;
inline int OpDesc_Attr::_internal_strings_size() const {
  return strings_.size();
}
inline int OpDesc_Attr::strings_size() const {
  return _internal_strings_size();
}
inline void OpDesc_Attr::clear_strings() {
  strings_.Clear();
}
inline std::string* OpDesc_Attr::add_strings() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.proto.OpDesc.Attr.strings)
  return _internal_add_strings();
}
inline const std::string& OpDesc_Attr::_internal_strings(int index) const {
  return strings_.Get(index);
}
inline const std::string& OpDesc_Attr::strings(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.strings)
  return _internal_strings(index);
}
inline std::string* OpDesc_Attr::mutable_strings(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.Attr.strings)
  return strings_.Mutable(index);
}
inline void OpDesc_Attr::set_strings(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.strings)
  strings_.Mutable(index)->assign(value);
}
inline void OpDesc_Attr::set_strings(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.strings)
  strings_.Mutable(index)->assign(std::move(value));
}
inline void OpDesc_Attr::set_strings(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.Attr.strings)
}
inline void OpDesc_Attr::set_strings(int index, const char* value, size_t size) {
  strings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.Attr.strings)
}
inline std::string* OpDesc_Attr::_internal_add_strings() {
  return strings_.Add();
}
inline void OpDesc_Attr::add_strings(const std::string& value) {
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.strings)
}
inline void OpDesc_Attr::add_strings(std::string&& value) {
  strings_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.strings)
}
inline void OpDesc_Attr::add_strings(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  strings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.proto.OpDesc.Attr.strings)
}
inline void OpDesc_Attr::add_strings(const char* value, size_t size) {
  strings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.proto.OpDesc.Attr.strings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDesc_Attr::strings() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.strings)
  return strings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDesc_Attr::mutable_strings() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.strings)
  return &strings_;
}

// optional bool b = 10;
inline bool OpDesc_Attr::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_b() const {
  return _internal_has_b();
}
inline void OpDesc_Attr::clear_b() {
  b_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool OpDesc_Attr::_internal_b() const {
  return b_;
}
inline bool OpDesc_Attr::b() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.b)
  return _internal_b();
}
inline void OpDesc_Attr::_internal_set_b(bool value) {
  _has_bits_[0] |= 0x00000020u;
  b_ = value;
}
inline void OpDesc_Attr::set_b(bool value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.b)
}

// repeated bool bools = 11;
inline int OpDesc_Attr::_internal_bools_size() const {
  return bools_.size();
}
inline int OpDesc_Attr::bools_size() const {
  return _internal_bools_size();
}
inline void OpDesc_Attr::clear_bools() {
  bools_.Clear();
}
inline bool OpDesc_Attr::_internal_bools(int index) const {
  return bools_.Get(index);
}
inline bool OpDesc_Attr::bools(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.bools)
  return _internal_bools(index);
}
inline void OpDesc_Attr::set_bools(int index, bool value) {
  bools_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.bools)
}
inline void OpDesc_Attr::_internal_add_bools(bool value) {
  bools_.Add(value);
}
inline void OpDesc_Attr::add_bools(bool value) {
  _internal_add_bools(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.bools)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDesc_Attr::_internal_bools() const {
  return bools_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
OpDesc_Attr::bools() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.bools)
  return _internal_bools();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDesc_Attr::_internal_mutable_bools() {
  return &bools_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
OpDesc_Attr::mutable_bools() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.bools)
  return _internal_mutable_bools();
}

// optional int32 block_idx = 12;
inline bool OpDesc_Attr::_internal_has_block_idx() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_block_idx() const {
  return _internal_has_block_idx();
}
inline void OpDesc_Attr::clear_block_idx() {
  block_idx_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::_internal_block_idx() const {
  return block_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::block_idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.block_idx)
  return _internal_block_idx();
}
inline void OpDesc_Attr::_internal_set_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  block_idx_ = value;
}
inline void OpDesc_Attr::set_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_block_idx(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.block_idx)
}

// optional int64 l = 13;
inline bool OpDesc_Attr::_internal_has_l() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool OpDesc_Attr::has_l() const {
  return _internal_has_l();
}
inline void OpDesc_Attr::clear_l() {
  l_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc_Attr::_internal_l() const {
  return l_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc_Attr::l() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.l)
  return _internal_l();
}
inline void OpDesc_Attr::_internal_set_l(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  l_ = value;
}
inline void OpDesc_Attr::set_l(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_l(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.l)
}

// repeated int32 blocks_idx = 14;
inline int OpDesc_Attr::_internal_blocks_idx_size() const {
  return blocks_idx_.size();
}
inline int OpDesc_Attr::blocks_idx_size() const {
  return _internal_blocks_idx_size();
}
inline void OpDesc_Attr::clear_blocks_idx() {
  blocks_idx_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::_internal_blocks_idx(int index) const {
  return blocks_idx_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpDesc_Attr::blocks_idx(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.blocks_idx)
  return _internal_blocks_idx(index);
}
inline void OpDesc_Attr::set_blocks_idx(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  blocks_idx_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.blocks_idx)
}
inline void OpDesc_Attr::_internal_add_blocks_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  blocks_idx_.Add(value);
}
inline void OpDesc_Attr::add_blocks_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_blocks_idx(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.blocks_idx)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDesc_Attr::_internal_blocks_idx() const {
  return blocks_idx_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OpDesc_Attr::blocks_idx() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.blocks_idx)
  return _internal_blocks_idx();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDesc_Attr::_internal_mutable_blocks_idx() {
  return &blocks_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OpDesc_Attr::mutable_blocks_idx() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.blocks_idx)
  return _internal_mutable_blocks_idx();
}

// repeated int64 longs = 15;
inline int OpDesc_Attr::_internal_longs_size() const {
  return longs_.size();
}
inline int OpDesc_Attr::longs_size() const {
  return _internal_longs_size();
}
inline void OpDesc_Attr::clear_longs() {
  longs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc_Attr::_internal_longs(int index) const {
  return longs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 OpDesc_Attr::longs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Attr.longs)
  return _internal_longs(index);
}
inline void OpDesc_Attr::set_longs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  longs_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Attr.longs)
}
inline void OpDesc_Attr::_internal_add_longs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  longs_.Add(value);
}
inline void OpDesc_Attr::add_longs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_longs(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Attr.longs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDesc_Attr::_internal_longs() const {
  return longs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
OpDesc_Attr::longs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Attr.longs)
  return _internal_longs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDesc_Attr::_internal_mutable_longs() {
  return &longs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
OpDesc_Attr::mutable_longs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Attr.longs)
  return _internal_mutable_longs();
}

// -------------------------------------------------------------------

// OpDesc_Var

// required string parameter = 1;
inline bool OpDesc_Var::_internal_has_parameter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpDesc_Var::has_parameter() const {
  return _internal_has_parameter();
}
inline void OpDesc_Var::clear_parameter() {
  parameter_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpDesc_Var::parameter() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Var.parameter)
  return _internal_parameter();
}
inline void OpDesc_Var::set_parameter(const std::string& value) {
  _internal_set_parameter(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Var.parameter)
}
inline std::string* OpDesc_Var::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.Var.parameter)
  return _internal_mutable_parameter();
}
inline const std::string& OpDesc_Var::_internal_parameter() const {
  return parameter_.Get();
}
inline void OpDesc_Var::_internal_set_parameter(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpDesc_Var::set_parameter(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpDesc.Var.parameter)
}
inline void OpDesc_Var::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.Var.parameter)
}
inline void OpDesc_Var::set_parameter(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.Var.parameter)
}
inline std::string* OpDesc_Var::_internal_mutable_parameter() {
  _has_bits_[0] |= 0x00000001u;
  return parameter_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpDesc_Var::release_parameter() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpDesc.Var.parameter)
  if (!_internal_has_parameter()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return parameter_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDesc_Var::set_allocated_parameter(std::string* parameter) {
  if (parameter != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  parameter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpDesc.Var.parameter)
}

// repeated string arguments = 2;
inline int OpDesc_Var::_internal_arguments_size() const {
  return arguments_.size();
}
inline int OpDesc_Var::arguments_size() const {
  return _internal_arguments_size();
}
inline void OpDesc_Var::clear_arguments() {
  arguments_.Clear();
}
inline std::string* OpDesc_Var::add_arguments() {
  // @@protoc_insertion_point(field_add_mutable:paddle.framework.proto.OpDesc.Var.arguments)
  return _internal_add_arguments();
}
inline const std::string& OpDesc_Var::_internal_arguments(int index) const {
  return arguments_.Get(index);
}
inline const std::string& OpDesc_Var::arguments(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.Var.arguments)
  return _internal_arguments(index);
}
inline std::string* OpDesc_Var::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.Var.arguments)
  return arguments_.Mutable(index);
}
inline void OpDesc_Var::set_arguments(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Var.arguments)
  arguments_.Mutable(index)->assign(value);
}
inline void OpDesc_Var::set_arguments(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.Var.arguments)
  arguments_.Mutable(index)->assign(std::move(value));
}
inline void OpDesc_Var::set_arguments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.Var.arguments)
}
inline void OpDesc_Var::set_arguments(int index, const char* value, size_t size) {
  arguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.Var.arguments)
}
inline std::string* OpDesc_Var::_internal_add_arguments() {
  return arguments_.Add();
}
inline void OpDesc_Var::add_arguments(const std::string& value) {
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Var.arguments)
}
inline void OpDesc_Var::add_arguments(std::string&& value) {
  arguments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.Var.arguments)
}
inline void OpDesc_Var::add_arguments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  arguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:paddle.framework.proto.OpDesc.Var.arguments)
}
inline void OpDesc_Var::add_arguments(const char* value, size_t size) {
  arguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:paddle.framework.proto.OpDesc.Var.arguments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OpDesc_Var::arguments() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.Var.arguments)
  return arguments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OpDesc_Var::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.Var.arguments)
  return &arguments_;
}

// -------------------------------------------------------------------

// OpDesc

// required string type = 3;
inline bool OpDesc::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpDesc::has_type() const {
  return _internal_has_type();
}
inline void OpDesc::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpDesc::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.type)
  return _internal_type();
}
inline void OpDesc::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.type)
}
inline std::string* OpDesc::mutable_type() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.type)
  return _internal_mutable_type();
}
inline const std::string& OpDesc::_internal_type() const {
  return type_.Get();
}
inline void OpDesc::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpDesc::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpDesc.type)
}
inline void OpDesc::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpDesc.type)
}
inline void OpDesc::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpDesc.type)
}
inline std::string* OpDesc::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpDesc::release_type() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpDesc.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpDesc::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpDesc.type)
}

// repeated .paddle.framework.proto.OpDesc.Var inputs = 1;
inline int OpDesc::_internal_inputs_size() const {
  return inputs_.size();
}
inline int OpDesc::inputs_size() const {
  return _internal_inputs_size();
}
inline void OpDesc::clear_inputs() {
  inputs_.Clear();
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >*
OpDesc::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.inputs)
  return &inputs_;
}
inline const ::paddle::framework::proto::OpDesc_Var& OpDesc::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::paddle::framework::proto::OpDesc_Var& OpDesc::inputs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.inputs)
  return _internal_inputs(index);
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::add_inputs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >&
OpDesc::inputs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.inputs)
  return inputs_;
}

// repeated .paddle.framework.proto.OpDesc.Var outputs = 2;
inline int OpDesc::_internal_outputs_size() const {
  return outputs_.size();
}
inline int OpDesc::outputs_size() const {
  return _internal_outputs_size();
}
inline void OpDesc::clear_outputs() {
  outputs_.Clear();
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >*
OpDesc::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.outputs)
  return &outputs_;
}
inline const ::paddle::framework::proto::OpDesc_Var& OpDesc::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::paddle::framework::proto::OpDesc_Var& OpDesc::outputs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.outputs)
  return _internal_outputs(index);
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::paddle::framework::proto::OpDesc_Var* OpDesc::add_outputs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Var >&
OpDesc::outputs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.outputs)
  return outputs_;
}

// repeated .paddle.framework.proto.OpDesc.Attr attrs = 4;
inline int OpDesc::_internal_attrs_size() const {
  return attrs_.size();
}
inline int OpDesc::attrs_size() const {
  return _internal_attrs_size();
}
inline void OpDesc::clear_attrs() {
  attrs_.Clear();
}
inline ::paddle::framework::proto::OpDesc_Attr* OpDesc::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpDesc.attrs)
  return attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Attr >*
OpDesc::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpDesc.attrs)
  return &attrs_;
}
inline const ::paddle::framework::proto::OpDesc_Attr& OpDesc::_internal_attrs(int index) const {
  return attrs_.Get(index);
}
inline const ::paddle::framework::proto::OpDesc_Attr& OpDesc::attrs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.attrs)
  return _internal_attrs(index);
}
inline ::paddle::framework::proto::OpDesc_Attr* OpDesc::_internal_add_attrs() {
  return attrs_.Add();
}
inline ::paddle::framework::proto::OpDesc_Attr* OpDesc::add_attrs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpDesc.attrs)
  return _internal_add_attrs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc_Attr >&
OpDesc::attrs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpDesc.attrs)
  return attrs_;
}

// optional bool is_target = 5 [default = false];
inline bool OpDesc::_internal_has_is_target() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpDesc::has_is_target() const {
  return _internal_has_is_target();
}
inline void OpDesc::clear_is_target() {
  is_target_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool OpDesc::_internal_is_target() const {
  return is_target_;
}
inline bool OpDesc::is_target() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpDesc.is_target)
  return _internal_is_target();
}
inline void OpDesc::_internal_set_is_target(bool value) {
  _has_bits_[0] |= 0x00000002u;
  is_target_ = value;
}
inline void OpDesc::set_is_target(bool value) {
  _internal_set_is_target(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpDesc.is_target)
}

// -------------------------------------------------------------------

// OpProto_Var

// required string name = 1;
inline bool OpProto_Var::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProto_Var::has_name() const {
  return _internal_has_name();
}
inline void OpProto_Var::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpProto_Var::name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Var.name)
  return _internal_name();
}
inline void OpProto_Var::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Var.name)
}
inline std::string* OpProto_Var::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.Var.name)
  return _internal_mutable_name();
}
inline const std::string& OpProto_Var::_internal_name() const {
  return name_.Get();
}
inline void OpProto_Var::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto_Var::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.Var.name)
}
inline void OpProto_Var::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.Var.name)
}
inline void OpProto_Var::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.Var.name)
}
inline std::string* OpProto_Var::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto_Var::release_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.Var.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto_Var::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.Var.name)
}

// required string comment = 2;
inline bool OpProto_Var::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProto_Var::has_comment() const {
  return _internal_has_comment();
}
inline void OpProto_Var::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpProto_Var::comment() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Var.comment)
  return _internal_comment();
}
inline void OpProto_Var::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Var.comment)
}
inline std::string* OpProto_Var::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.Var.comment)
  return _internal_mutable_comment();
}
inline const std::string& OpProto_Var::_internal_comment() const {
  return comment_.Get();
}
inline void OpProto_Var::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto_Var::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.Var.comment)
}
inline void OpProto_Var::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.Var.comment)
}
inline void OpProto_Var::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.Var.comment)
}
inline std::string* OpProto_Var::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto_Var::release_comment() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.Var.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto_Var::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.Var.comment)
}

// optional bool duplicable = 3 [default = false];
inline bool OpProto_Var::_internal_has_duplicable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpProto_Var::has_duplicable() const {
  return _internal_has_duplicable();
}
inline void OpProto_Var::clear_duplicable() {
  duplicable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OpProto_Var::_internal_duplicable() const {
  return duplicable_;
}
inline bool OpProto_Var::duplicable() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Var.duplicable)
  return _internal_duplicable();
}
inline void OpProto_Var::_internal_set_duplicable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  duplicable_ = value;
}
inline void OpProto_Var::set_duplicable(bool value) {
  _internal_set_duplicable(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Var.duplicable)
}

// optional bool intermediate = 4 [default = false];
inline bool OpProto_Var::_internal_has_intermediate() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpProto_Var::has_intermediate() const {
  return _internal_has_intermediate();
}
inline void OpProto_Var::clear_intermediate() {
  intermediate_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool OpProto_Var::_internal_intermediate() const {
  return intermediate_;
}
inline bool OpProto_Var::intermediate() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Var.intermediate)
  return _internal_intermediate();
}
inline void OpProto_Var::_internal_set_intermediate(bool value) {
  _has_bits_[0] |= 0x00000008u;
  intermediate_ = value;
}
inline void OpProto_Var::set_intermediate(bool value) {
  _internal_set_intermediate(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Var.intermediate)
}

// optional bool dispensable = 5 [default = false];
inline bool OpProto_Var::_internal_has_dispensable() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OpProto_Var::has_dispensable() const {
  return _internal_has_dispensable();
}
inline void OpProto_Var::clear_dispensable() {
  dispensable_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool OpProto_Var::_internal_dispensable() const {
  return dispensable_;
}
inline bool OpProto_Var::dispensable() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Var.dispensable)
  return _internal_dispensable();
}
inline void OpProto_Var::_internal_set_dispensable(bool value) {
  _has_bits_[0] |= 0x00000010u;
  dispensable_ = value;
}
inline void OpProto_Var::set_dispensable(bool value) {
  _internal_set_dispensable(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Var.dispensable)
}

// -------------------------------------------------------------------

// OpProto_Attr

// required string name = 1;
inline bool OpProto_Attr::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProto_Attr::has_name() const {
  return _internal_has_name();
}
inline void OpProto_Attr::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpProto_Attr::name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Attr.name)
  return _internal_name();
}
inline void OpProto_Attr::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Attr.name)
}
inline std::string* OpProto_Attr::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.Attr.name)
  return _internal_mutable_name();
}
inline const std::string& OpProto_Attr::_internal_name() const {
  return name_.Get();
}
inline void OpProto_Attr::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto_Attr::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.Attr.name)
}
inline void OpProto_Attr::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.Attr.name)
}
inline void OpProto_Attr::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.Attr.name)
}
inline std::string* OpProto_Attr::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto_Attr::release_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.Attr.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto_Attr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.Attr.name)
}

// required .paddle.framework.proto.AttrType type = 2;
inline bool OpProto_Attr::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OpProto_Attr::has_type() const {
  return _internal_has_type();
}
inline void OpProto_Attr::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::paddle::framework::proto::AttrType OpProto_Attr::_internal_type() const {
  return static_cast< ::paddle::framework::proto::AttrType >(type_);
}
inline ::paddle::framework::proto::AttrType OpProto_Attr::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Attr.type)
  return _internal_type();
}
inline void OpProto_Attr::_internal_set_type(::paddle::framework::proto::AttrType value) {
  assert(::paddle::framework::proto::AttrType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void OpProto_Attr::set_type(::paddle::framework::proto::AttrType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Attr.type)
}

// required string comment = 3;
inline bool OpProto_Attr::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProto_Attr::has_comment() const {
  return _internal_has_comment();
}
inline void OpProto_Attr::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpProto_Attr::comment() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Attr.comment)
  return _internal_comment();
}
inline void OpProto_Attr::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Attr.comment)
}
inline std::string* OpProto_Attr::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.Attr.comment)
  return _internal_mutable_comment();
}
inline const std::string& OpProto_Attr::_internal_comment() const {
  return comment_.Get();
}
inline void OpProto_Attr::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto_Attr::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.Attr.comment)
}
inline void OpProto_Attr::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.Attr.comment)
}
inline void OpProto_Attr::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.Attr.comment)
}
inline std::string* OpProto_Attr::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto_Attr::release_comment() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.Attr.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto_Attr::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.Attr.comment)
}

// optional bool generated = 4 [default = false];
inline bool OpProto_Attr::_internal_has_generated() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OpProto_Attr::has_generated() const {
  return _internal_has_generated();
}
inline void OpProto_Attr::clear_generated() {
  generated_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool OpProto_Attr::_internal_generated() const {
  return generated_;
}
inline bool OpProto_Attr::generated() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.Attr.generated)
  return _internal_generated();
}
inline void OpProto_Attr::_internal_set_generated(bool value) {
  _has_bits_[0] |= 0x00000008u;
  generated_ = value;
}
inline void OpProto_Attr::set_generated(bool value) {
  _internal_set_generated(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.Attr.generated)
}

// -------------------------------------------------------------------

// OpProto

// required string type = 1;
inline bool OpProto::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpProto::has_type() const {
  return _internal_has_type();
}
inline void OpProto::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpProto::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.type)
  return _internal_type();
}
inline void OpProto::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.type)
}
inline std::string* OpProto::mutable_type() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.type)
  return _internal_mutable_type();
}
inline const std::string& OpProto::_internal_type() const {
  return type_.Get();
}
inline void OpProto::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto::set_type(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.type)
}
inline void OpProto::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.type)
}
inline void OpProto::set_type(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.type)
}
inline std::string* OpProto::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000001u;
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto::release_type() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.type)
}

// repeated .paddle.framework.proto.OpProto.Var inputs = 2;
inline int OpProto::_internal_inputs_size() const {
  return inputs_.size();
}
inline int OpProto::inputs_size() const {
  return _internal_inputs_size();
}
inline void OpProto::clear_inputs() {
  inputs_.Clear();
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >*
OpProto::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpProto.inputs)
  return &inputs_;
}
inline const ::paddle::framework::proto::OpProto_Var& OpProto::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::paddle::framework::proto::OpProto_Var& OpProto::inputs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.inputs)
  return _internal_inputs(index);
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::add_inputs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpProto.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >&
OpProto::inputs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpProto.inputs)
  return inputs_;
}

// repeated .paddle.framework.proto.OpProto.Var outputs = 3;
inline int OpProto::_internal_outputs_size() const {
  return outputs_.size();
}
inline int OpProto::outputs_size() const {
  return _internal_outputs_size();
}
inline void OpProto::clear_outputs() {
  outputs_.Clear();
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >*
OpProto::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpProto.outputs)
  return &outputs_;
}
inline const ::paddle::framework::proto::OpProto_Var& OpProto::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::paddle::framework::proto::OpProto_Var& OpProto::outputs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.outputs)
  return _internal_outputs(index);
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::paddle::framework::proto::OpProto_Var* OpProto::add_outputs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpProto.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Var >&
OpProto::outputs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpProto.outputs)
  return outputs_;
}

// repeated .paddle.framework.proto.OpProto.Attr attrs = 4;
inline int OpProto::_internal_attrs_size() const {
  return attrs_.size();
}
inline int OpProto::attrs_size() const {
  return _internal_attrs_size();
}
inline void OpProto::clear_attrs() {
  attrs_.Clear();
}
inline ::paddle::framework::proto::OpProto_Attr* OpProto::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.attrs)
  return attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Attr >*
OpProto::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpProto.attrs)
  return &attrs_;
}
inline const ::paddle::framework::proto::OpProto_Attr& OpProto::_internal_attrs(int index) const {
  return attrs_.Get(index);
}
inline const ::paddle::framework::proto::OpProto_Attr& OpProto::attrs(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.attrs)
  return _internal_attrs(index);
}
inline ::paddle::framework::proto::OpProto_Attr* OpProto::_internal_add_attrs() {
  return attrs_.Add();
}
inline ::paddle::framework::proto::OpProto_Attr* OpProto::add_attrs() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpProto.attrs)
  return _internal_add_attrs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpProto_Attr >&
OpProto::attrs() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpProto.attrs)
  return attrs_;
}

// required string comment = 5;
inline bool OpProto::_internal_has_comment() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OpProto::has_comment() const {
  return _internal_has_comment();
}
inline void OpProto::clear_comment() {
  comment_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OpProto::comment() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpProto.comment)
  return _internal_comment();
}
inline void OpProto::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpProto.comment)
}
inline std::string* OpProto::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpProto.comment)
  return _internal_mutable_comment();
}
inline const std::string& OpProto::_internal_comment() const {
  return comment_.Get();
}
inline void OpProto::_internal_set_comment(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpProto::set_comment(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpProto.comment)
}
inline void OpProto::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpProto.comment)
}
inline void OpProto::set_comment(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpProto.comment)
}
inline std::string* OpProto::_internal_mutable_comment() {
  _has_bits_[0] |= 0x00000002u;
  return comment_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpProto::release_comment() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpProto.comment)
  if (!_internal_has_comment()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return comment_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpProto::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  comment_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpProto.comment)
}

// -------------------------------------------------------------------

// VarType_TensorDesc

// required .paddle.framework.proto.VarType.Type data_type = 1;
inline bool VarType_TensorDesc::_internal_has_data_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VarType_TensorDesc::has_data_type() const {
  return _internal_has_data_type();
}
inline void VarType_TensorDesc::clear_data_type() {
  data_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::paddle::framework::proto::VarType_Type VarType_TensorDesc::_internal_data_type() const {
  return static_cast< ::paddle::framework::proto::VarType_Type >(data_type_);
}
inline ::paddle::framework::proto::VarType_Type VarType_TensorDesc::data_type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.TensorDesc.data_type)
  return _internal_data_type();
}
inline void VarType_TensorDesc::_internal_set_data_type(::paddle::framework::proto::VarType_Type value) {
  assert(::paddle::framework::proto::VarType_Type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  data_type_ = value;
}
inline void VarType_TensorDesc::set_data_type(::paddle::framework::proto::VarType_Type value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.TensorDesc.data_type)
}

// repeated int64 dims = 2;
inline int VarType_TensorDesc::_internal_dims_size() const {
  return dims_.size();
}
inline int VarType_TensorDesc::dims_size() const {
  return _internal_dims_size();
}
inline void VarType_TensorDesc::clear_dims() {
  dims_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VarType_TensorDesc::_internal_dims(int index) const {
  return dims_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 VarType_TensorDesc::dims(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.TensorDesc.dims)
  return _internal_dims(index);
}
inline void VarType_TensorDesc::set_dims(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.TensorDesc.dims)
}
inline void VarType_TensorDesc::_internal_add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  dims_.Add(value);
}
inline void VarType_TensorDesc::add_dims(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_dims(value);
  // @@protoc_insertion_point(field_add:paddle.framework.proto.VarType.TensorDesc.dims)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
VarType_TensorDesc::_internal_dims() const {
  return dims_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
VarType_TensorDesc::dims() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.VarType.TensorDesc.dims)
  return _internal_dims();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
VarType_TensorDesc::_internal_mutable_dims() {
  return &dims_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
VarType_TensorDesc::mutable_dims() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.VarType.TensorDesc.dims)
  return _internal_mutable_dims();
}

// -------------------------------------------------------------------

// VarType_LoDTensorDesc

// required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
inline bool VarType_LoDTensorDesc::_internal_has_tensor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tensor_ != nullptr);
  return value;
}
inline bool VarType_LoDTensorDesc::has_tensor() const {
  return _internal_has_tensor();
}
inline void VarType_LoDTensorDesc::clear_tensor() {
  if (tensor_ != nullptr) tensor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType_LoDTensorDesc::_internal_tensor() const {
  const ::paddle::framework::proto::VarType_TensorDesc* p = tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_TensorDesc&>(
      ::paddle::framework::proto::_VarType_TensorDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType_LoDTensorDesc::tensor() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.LoDTensorDesc.tensor)
  return _internal_tensor();
}
inline void VarType_LoDTensorDesc::unsafe_arena_set_allocated_tensor(
    ::paddle::framework::proto::VarType_TensorDesc* tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_);
  }
  tensor_ = tensor;
  if (tensor) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.LoDTensorDesc.tensor)
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorDesc::release_tensor() {
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = tensor_;
  tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorDesc::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.LoDTensorDesc.tensor)
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = tensor_;
  tensor_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorDesc::_internal_mutable_tensor() {
  _has_bits_[0] |= 0x00000001u;
  if (tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_TensorDesc>(GetArena());
    tensor_ = p;
  }
  return tensor_;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorDesc::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.LoDTensorDesc.tensor)
  return _internal_mutable_tensor();
}
inline void VarType_LoDTensorDesc::set_allocated_tensor(::paddle::framework::proto::VarType_TensorDesc* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_;
  }
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor);
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.LoDTensorDesc.tensor)
}

// optional int32 lod_level = 2 [default = 0];
inline bool VarType_LoDTensorDesc::_internal_has_lod_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VarType_LoDTensorDesc::has_lod_level() const {
  return _internal_has_lod_level();
}
inline void VarType_LoDTensorDesc::clear_lod_level() {
  lod_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarType_LoDTensorDesc::_internal_lod_level() const {
  return lod_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarType_LoDTensorDesc::lod_level() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.LoDTensorDesc.lod_level)
  return _internal_lod_level();
}
inline void VarType_LoDTensorDesc::_internal_set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lod_level_ = value;
}
inline void VarType_LoDTensorDesc::set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lod_level(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.LoDTensorDesc.lod_level)
}

// -------------------------------------------------------------------

// VarType_LoDTensorArrayDesc

// required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
inline bool VarType_LoDTensorArrayDesc::_internal_has_tensor() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || tensor_ != nullptr);
  return value;
}
inline bool VarType_LoDTensorArrayDesc::has_tensor() const {
  return _internal_has_tensor();
}
inline void VarType_LoDTensorArrayDesc::clear_tensor() {
  if (tensor_ != nullptr) tensor_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType_LoDTensorArrayDesc::_internal_tensor() const {
  const ::paddle::framework::proto::VarType_TensorDesc* p = tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_TensorDesc&>(
      ::paddle::framework::proto::_VarType_TensorDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType_LoDTensorArrayDesc::tensor() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.LoDTensorArrayDesc.tensor)
  return _internal_tensor();
}
inline void VarType_LoDTensorArrayDesc::unsafe_arena_set_allocated_tensor(
    ::paddle::framework::proto::VarType_TensorDesc* tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_);
  }
  tensor_ = tensor;
  if (tensor) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.LoDTensorArrayDesc.tensor)
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorArrayDesc::release_tensor() {
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = tensor_;
  tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorArrayDesc::unsafe_arena_release_tensor() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.LoDTensorArrayDesc.tensor)
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = tensor_;
  tensor_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorArrayDesc::_internal_mutable_tensor() {
  _has_bits_[0] |= 0x00000001u;
  if (tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_TensorDesc>(GetArena());
    tensor_ = p;
  }
  return tensor_;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType_LoDTensorArrayDesc::mutable_tensor() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.LoDTensorArrayDesc.tensor)
  return _internal_mutable_tensor();
}
inline void VarType_LoDTensorArrayDesc::set_allocated_tensor(::paddle::framework::proto::VarType_TensorDesc* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_;
  }
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor);
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tensor_ = tensor;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.LoDTensorArrayDesc.tensor)
}

// optional int32 lod_level = 2 [default = 0];
inline bool VarType_LoDTensorArrayDesc::_internal_has_lod_level() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VarType_LoDTensorArrayDesc::has_lod_level() const {
  return _internal_has_lod_level();
}
inline void VarType_LoDTensorArrayDesc::clear_lod_level() {
  lod_level_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarType_LoDTensorArrayDesc::_internal_lod_level() const {
  return lod_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VarType_LoDTensorArrayDesc::lod_level() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.LoDTensorArrayDesc.lod_level)
  return _internal_lod_level();
}
inline void VarType_LoDTensorArrayDesc::_internal_set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  lod_level_ = value;
}
inline void VarType_LoDTensorArrayDesc::set_lod_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_lod_level(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.LoDTensorArrayDesc.lod_level)
}

// -------------------------------------------------------------------

// VarType_ReaderDesc

// repeated .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 1;
inline int VarType_ReaderDesc::_internal_lod_tensor_size() const {
  return lod_tensor_.size();
}
inline int VarType_ReaderDesc::lod_tensor_size() const {
  return _internal_lod_tensor_size();
}
inline void VarType_ReaderDesc::clear_lod_tensor() {
  lod_tensor_.Clear();
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType_ReaderDesc::mutable_lod_tensor(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.ReaderDesc.lod_tensor)
  return lod_tensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarType_LoDTensorDesc >*
VarType_ReaderDesc::mutable_lod_tensor() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.VarType.ReaderDesc.lod_tensor)
  return &lod_tensor_;
}
inline const ::paddle::framework::proto::VarType_LoDTensorDesc& VarType_ReaderDesc::_internal_lod_tensor(int index) const {
  return lod_tensor_.Get(index);
}
inline const ::paddle::framework::proto::VarType_LoDTensorDesc& VarType_ReaderDesc::lod_tensor(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.ReaderDesc.lod_tensor)
  return _internal_lod_tensor(index);
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType_ReaderDesc::_internal_add_lod_tensor() {
  return lod_tensor_.Add();
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType_ReaderDesc::add_lod_tensor() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.VarType.ReaderDesc.lod_tensor)
  return _internal_add_lod_tensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarType_LoDTensorDesc >&
VarType_ReaderDesc::lod_tensor() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.VarType.ReaderDesc.lod_tensor)
  return lod_tensor_;
}

// -------------------------------------------------------------------

// VarType_Tuple

// repeated .paddle.framework.proto.VarType.Type element_type = 1;
inline int VarType_Tuple::_internal_element_type_size() const {
  return element_type_.size();
}
inline int VarType_Tuple::element_type_size() const {
  return _internal_element_type_size();
}
inline void VarType_Tuple::clear_element_type() {
  element_type_.Clear();
}
inline ::paddle::framework::proto::VarType_Type VarType_Tuple::_internal_element_type(int index) const {
  return static_cast< ::paddle::framework::proto::VarType_Type >(element_type_.Get(index));
}
inline ::paddle::framework::proto::VarType_Type VarType_Tuple::element_type(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.Tuple.element_type)
  return _internal_element_type(index);
}
inline void VarType_Tuple::set_element_type(int index, ::paddle::framework::proto::VarType_Type value) {
  assert(::paddle::framework::proto::VarType_Type_IsValid(value));
  element_type_.Set(index, value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.Tuple.element_type)
}
inline void VarType_Tuple::_internal_add_element_type(::paddle::framework::proto::VarType_Type value) {
  assert(::paddle::framework::proto::VarType_Type_IsValid(value));
  element_type_.Add(value);
}
inline void VarType_Tuple::add_element_type(::paddle::framework::proto::VarType_Type value) {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.VarType.Tuple.element_type)
  _internal_add_element_type(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
VarType_Tuple::element_type() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.VarType.Tuple.element_type)
  return element_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
VarType_Tuple::_internal_mutable_element_type() {
  return &element_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
VarType_Tuple::mutable_element_type() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.VarType.Tuple.element_type)
  return _internal_mutable_element_type();
}

// -------------------------------------------------------------------

// VarType

// required .paddle.framework.proto.VarType.Type type = 1;
inline bool VarType::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VarType::has_type() const {
  return _internal_has_type();
}
inline void VarType::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::paddle::framework::proto::VarType_Type VarType::_internal_type() const {
  return static_cast< ::paddle::framework::proto::VarType_Type >(type_);
}
inline ::paddle::framework::proto::VarType_Type VarType::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.type)
  return _internal_type();
}
inline void VarType::_internal_set_type(::paddle::framework::proto::VarType_Type value) {
  assert(::paddle::framework::proto::VarType_Type_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void VarType::set_type(::paddle::framework::proto::VarType_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarType.type)
}

// optional .paddle.framework.proto.VarType.TensorDesc selected_rows = 2;
inline bool VarType::_internal_has_selected_rows() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || selected_rows_ != nullptr);
  return value;
}
inline bool VarType::has_selected_rows() const {
  return _internal_has_selected_rows();
}
inline void VarType::clear_selected_rows() {
  if (selected_rows_ != nullptr) selected_rows_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType::_internal_selected_rows() const {
  const ::paddle::framework::proto::VarType_TensorDesc* p = selected_rows_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_TensorDesc&>(
      ::paddle::framework::proto::_VarType_TensorDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_TensorDesc& VarType::selected_rows() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.selected_rows)
  return _internal_selected_rows();
}
inline void VarType::unsafe_arena_set_allocated_selected_rows(
    ::paddle::framework::proto::VarType_TensorDesc* selected_rows) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_rows_);
  }
  selected_rows_ = selected_rows;
  if (selected_rows) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.selected_rows)
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType::release_selected_rows() {
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = selected_rows_;
  selected_rows_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType::unsafe_arena_release_selected_rows() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.selected_rows)
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::VarType_TensorDesc* temp = selected_rows_;
  selected_rows_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType::_internal_mutable_selected_rows() {
  _has_bits_[0] |= 0x00000001u;
  if (selected_rows_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_TensorDesc>(GetArena());
    selected_rows_ = p;
  }
  return selected_rows_;
}
inline ::paddle::framework::proto::VarType_TensorDesc* VarType::mutable_selected_rows() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.selected_rows)
  return _internal_mutable_selected_rows();
}
inline void VarType::set_allocated_selected_rows(::paddle::framework::proto::VarType_TensorDesc* selected_rows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete selected_rows_;
  }
  if (selected_rows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(selected_rows);
    if (message_arena != submessage_arena) {
      selected_rows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_rows, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  selected_rows_ = selected_rows;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.selected_rows)
}

// optional .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 3;
inline bool VarType::_internal_has_lod_tensor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || lod_tensor_ != nullptr);
  return value;
}
inline bool VarType::has_lod_tensor() const {
  return _internal_has_lod_tensor();
}
inline void VarType::clear_lod_tensor() {
  if (lod_tensor_ != nullptr) lod_tensor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paddle::framework::proto::VarType_LoDTensorDesc& VarType::_internal_lod_tensor() const {
  const ::paddle::framework::proto::VarType_LoDTensorDesc* p = lod_tensor_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_LoDTensorDesc&>(
      ::paddle::framework::proto::_VarType_LoDTensorDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_LoDTensorDesc& VarType::lod_tensor() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.lod_tensor)
  return _internal_lod_tensor();
}
inline void VarType::unsafe_arena_set_allocated_lod_tensor(
    ::paddle::framework::proto::VarType_LoDTensorDesc* lod_tensor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lod_tensor_);
  }
  lod_tensor_ = lod_tensor;
  if (lod_tensor) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.lod_tensor)
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType::release_lod_tensor() {
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::VarType_LoDTensorDesc* temp = lod_tensor_;
  lod_tensor_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType::unsafe_arena_release_lod_tensor() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.lod_tensor)
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::VarType_LoDTensorDesc* temp = lod_tensor_;
  lod_tensor_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType::_internal_mutable_lod_tensor() {
  _has_bits_[0] |= 0x00000002u;
  if (lod_tensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_LoDTensorDesc>(GetArena());
    lod_tensor_ = p;
  }
  return lod_tensor_;
}
inline ::paddle::framework::proto::VarType_LoDTensorDesc* VarType::mutable_lod_tensor() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.lod_tensor)
  return _internal_mutable_lod_tensor();
}
inline void VarType::set_allocated_lod_tensor(::paddle::framework::proto::VarType_LoDTensorDesc* lod_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lod_tensor_;
  }
  if (lod_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lod_tensor);
    if (message_arena != submessage_arena) {
      lod_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lod_tensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lod_tensor_ = lod_tensor;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.lod_tensor)
}

// optional .paddle.framework.proto.VarType.LoDTensorArrayDesc tensor_array = 4;
inline bool VarType::_internal_has_tensor_array() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || tensor_array_ != nullptr);
  return value;
}
inline bool VarType::has_tensor_array() const {
  return _internal_has_tensor_array();
}
inline void VarType::clear_tensor_array() {
  if (tensor_array_ != nullptr) tensor_array_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::paddle::framework::proto::VarType_LoDTensorArrayDesc& VarType::_internal_tensor_array() const {
  const ::paddle::framework::proto::VarType_LoDTensorArrayDesc* p = tensor_array_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_LoDTensorArrayDesc&>(
      ::paddle::framework::proto::_VarType_LoDTensorArrayDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_LoDTensorArrayDesc& VarType::tensor_array() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.tensor_array)
  return _internal_tensor_array();
}
inline void VarType::unsafe_arena_set_allocated_tensor_array(
    ::paddle::framework::proto::VarType_LoDTensorArrayDesc* tensor_array) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_array_);
  }
  tensor_array_ = tensor_array;
  if (tensor_array) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.tensor_array)
}
inline ::paddle::framework::proto::VarType_LoDTensorArrayDesc* VarType::release_tensor_array() {
  _has_bits_[0] &= ~0x00000004u;
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* temp = tensor_array_;
  tensor_array_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_LoDTensorArrayDesc* VarType::unsafe_arena_release_tensor_array() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.tensor_array)
  _has_bits_[0] &= ~0x00000004u;
  ::paddle::framework::proto::VarType_LoDTensorArrayDesc* temp = tensor_array_;
  tensor_array_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_LoDTensorArrayDesc* VarType::_internal_mutable_tensor_array() {
  _has_bits_[0] |= 0x00000004u;
  if (tensor_array_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_LoDTensorArrayDesc>(GetArena());
    tensor_array_ = p;
  }
  return tensor_array_;
}
inline ::paddle::framework::proto::VarType_LoDTensorArrayDesc* VarType::mutable_tensor_array() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.tensor_array)
  return _internal_mutable_tensor_array();
}
inline void VarType::set_allocated_tensor_array(::paddle::framework::proto::VarType_LoDTensorArrayDesc* tensor_array) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tensor_array_;
  }
  if (tensor_array) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tensor_array);
    if (message_arena != submessage_arena) {
      tensor_array = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_array, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  tensor_array_ = tensor_array;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.tensor_array)
}

// optional .paddle.framework.proto.VarType.ReaderDesc reader = 5;
inline bool VarType::_internal_has_reader() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || reader_ != nullptr);
  return value;
}
inline bool VarType::has_reader() const {
  return _internal_has_reader();
}
inline void VarType::clear_reader() {
  if (reader_ != nullptr) reader_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::paddle::framework::proto::VarType_ReaderDesc& VarType::_internal_reader() const {
  const ::paddle::framework::proto::VarType_ReaderDesc* p = reader_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_ReaderDesc&>(
      ::paddle::framework::proto::_VarType_ReaderDesc_default_instance_);
}
inline const ::paddle::framework::proto::VarType_ReaderDesc& VarType::reader() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.reader)
  return _internal_reader();
}
inline void VarType::unsafe_arena_set_allocated_reader(
    ::paddle::framework::proto::VarType_ReaderDesc* reader) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reader_);
  }
  reader_ = reader;
  if (reader) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.reader)
}
inline ::paddle::framework::proto::VarType_ReaderDesc* VarType::release_reader() {
  _has_bits_[0] &= ~0x00000008u;
  ::paddle::framework::proto::VarType_ReaderDesc* temp = reader_;
  reader_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_ReaderDesc* VarType::unsafe_arena_release_reader() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.reader)
  _has_bits_[0] &= ~0x00000008u;
  ::paddle::framework::proto::VarType_ReaderDesc* temp = reader_;
  reader_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_ReaderDesc* VarType::_internal_mutable_reader() {
  _has_bits_[0] |= 0x00000008u;
  if (reader_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_ReaderDesc>(GetArena());
    reader_ = p;
  }
  return reader_;
}
inline ::paddle::framework::proto::VarType_ReaderDesc* VarType::mutable_reader() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.reader)
  return _internal_mutable_reader();
}
inline void VarType::set_allocated_reader(::paddle::framework::proto::VarType_ReaderDesc* reader) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reader_;
  }
  if (reader) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reader);
    if (message_arena != submessage_arena) {
      reader = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reader, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  reader_ = reader;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.reader)
}

// optional .paddle.framework.proto.VarType.Tuple tuple = 7;
inline bool VarType::_internal_has_tuple() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || tuple_ != nullptr);
  return value;
}
inline bool VarType::has_tuple() const {
  return _internal_has_tuple();
}
inline void VarType::clear_tuple() {
  if (tuple_ != nullptr) tuple_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::paddle::framework::proto::VarType_Tuple& VarType::_internal_tuple() const {
  const ::paddle::framework::proto::VarType_Tuple* p = tuple_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType_Tuple&>(
      ::paddle::framework::proto::_VarType_Tuple_default_instance_);
}
inline const ::paddle::framework::proto::VarType_Tuple& VarType::tuple() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarType.tuple)
  return _internal_tuple();
}
inline void VarType::unsafe_arena_set_allocated_tuple(
    ::paddle::framework::proto::VarType_Tuple* tuple) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tuple_);
  }
  tuple_ = tuple;
  if (tuple) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarType.tuple)
}
inline ::paddle::framework::proto::VarType_Tuple* VarType::release_tuple() {
  _has_bits_[0] &= ~0x00000010u;
  ::paddle::framework::proto::VarType_Tuple* temp = tuple_;
  tuple_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType_Tuple* VarType::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarType.tuple)
  _has_bits_[0] &= ~0x00000010u;
  ::paddle::framework::proto::VarType_Tuple* temp = tuple_;
  tuple_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType_Tuple* VarType::_internal_mutable_tuple() {
  _has_bits_[0] |= 0x00000010u;
  if (tuple_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType_Tuple>(GetArena());
    tuple_ = p;
  }
  return tuple_;
}
inline ::paddle::framework::proto::VarType_Tuple* VarType::mutable_tuple() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarType.tuple)
  return _internal_mutable_tuple();
}
inline void VarType::set_allocated_tuple(::paddle::framework::proto::VarType_Tuple* tuple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tuple_;
  }
  if (tuple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tuple);
    if (message_arena != submessage_arena) {
      tuple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  tuple_ = tuple;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarType.tuple)
}

// -------------------------------------------------------------------

// VarDesc

// required string name = 1;
inline bool VarDesc::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VarDesc::has_name() const {
  return _internal_has_name();
}
inline void VarDesc::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VarDesc::name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarDesc.name)
  return _internal_name();
}
inline void VarDesc::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarDesc.name)
}
inline std::string* VarDesc::mutable_name() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarDesc.name)
  return _internal_mutable_name();
}
inline const std::string& VarDesc::_internal_name() const {
  return name_.Get();
}
inline void VarDesc::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VarDesc::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.VarDesc.name)
}
inline void VarDesc::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.VarDesc.name)
}
inline void VarDesc::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.VarDesc.name)
}
inline std::string* VarDesc::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VarDesc::release_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarDesc.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VarDesc::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarDesc.name)
}

// required .paddle.framework.proto.VarType type = 2;
inline bool VarDesc::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || type_ != nullptr);
  return value;
}
inline bool VarDesc::has_type() const {
  return _internal_has_type();
}
inline void VarDesc::clear_type() {
  if (type_ != nullptr) type_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paddle::framework::proto::VarType& VarDesc::_internal_type() const {
  const ::paddle::framework::proto::VarType* p = type_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::VarType&>(
      ::paddle::framework::proto::_VarType_default_instance_);
}
inline const ::paddle::framework::proto::VarType& VarDesc::type() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarDesc.type)
  return _internal_type();
}
inline void VarDesc::unsafe_arena_set_allocated_type(
    ::paddle::framework::proto::VarType* type) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type_);
  }
  type_ = type;
  if (type) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.VarDesc.type)
}
inline ::paddle::framework::proto::VarType* VarDesc::release_type() {
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::VarType* temp = type_;
  type_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::VarType* VarDesc::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.VarDesc.type)
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::VarType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::VarType* VarDesc::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::VarType>(GetArena());
    type_ = p;
  }
  return type_;
}
inline ::paddle::framework::proto::VarType* VarDesc::mutable_type() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.VarDesc.type)
  return _internal_mutable_type();
}
inline void VarDesc::set_allocated_type(::paddle::framework::proto::VarType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.VarDesc.type)
}

// optional bool persistable = 3 [default = false];
inline bool VarDesc::_internal_has_persistable() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VarDesc::has_persistable() const {
  return _internal_has_persistable();
}
inline void VarDesc::clear_persistable() {
  persistable_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool VarDesc::_internal_persistable() const {
  return persistable_;
}
inline bool VarDesc::persistable() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarDesc.persistable)
  return _internal_persistable();
}
inline void VarDesc::_internal_set_persistable(bool value) {
  _has_bits_[0] |= 0x00000004u;
  persistable_ = value;
}
inline void VarDesc::set_persistable(bool value) {
  _internal_set_persistable(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarDesc.persistable)
}

// optional bool need_check_feed = 4 [default = false];
inline bool VarDesc::_internal_has_need_check_feed() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VarDesc::has_need_check_feed() const {
  return _internal_has_need_check_feed();
}
inline void VarDesc::clear_need_check_feed() {
  need_check_feed_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool VarDesc::_internal_need_check_feed() const {
  return need_check_feed_;
}
inline bool VarDesc::need_check_feed() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.VarDesc.need_check_feed)
  return _internal_need_check_feed();
}
inline void VarDesc::_internal_set_need_check_feed(bool value) {
  _has_bits_[0] |= 0x00000008u;
  need_check_feed_ = value;
}
inline void VarDesc::set_need_check_feed(bool value) {
  _internal_set_need_check_feed(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.VarDesc.need_check_feed)
}

// -------------------------------------------------------------------

// BlockDesc

// required int32 idx = 1;
inline bool BlockDesc::_internal_has_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BlockDesc::has_idx() const {
  return _internal_has_idx();
}
inline void BlockDesc::clear_idx() {
  idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.BlockDesc.idx)
  return _internal_idx();
}
inline void BlockDesc::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  idx_ = value;
}
inline void BlockDesc::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.BlockDesc.idx)
}

// required int32 parent_idx = 2;
inline bool BlockDesc::_internal_has_parent_idx() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BlockDesc::has_parent_idx() const {
  return _internal_has_parent_idx();
}
inline void BlockDesc::clear_parent_idx() {
  parent_idx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::_internal_parent_idx() const {
  return parent_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::parent_idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.BlockDesc.parent_idx)
  return _internal_parent_idx();
}
inline void BlockDesc::_internal_set_parent_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  parent_idx_ = value;
}
inline void BlockDesc::set_parent_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_parent_idx(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.BlockDesc.parent_idx)
}

// repeated .paddle.framework.proto.VarDesc vars = 3;
inline int BlockDesc::_internal_vars_size() const {
  return vars_.size();
}
inline int BlockDesc::vars_size() const {
  return _internal_vars_size();
}
inline void BlockDesc::clear_vars() {
  vars_.Clear();
}
inline ::paddle::framework::proto::VarDesc* BlockDesc::mutable_vars(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.BlockDesc.vars)
  return vars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarDesc >*
BlockDesc::mutable_vars() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.BlockDesc.vars)
  return &vars_;
}
inline const ::paddle::framework::proto::VarDesc& BlockDesc::_internal_vars(int index) const {
  return vars_.Get(index);
}
inline const ::paddle::framework::proto::VarDesc& BlockDesc::vars(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.BlockDesc.vars)
  return _internal_vars(index);
}
inline ::paddle::framework::proto::VarDesc* BlockDesc::_internal_add_vars() {
  return vars_.Add();
}
inline ::paddle::framework::proto::VarDesc* BlockDesc::add_vars() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.BlockDesc.vars)
  return _internal_add_vars();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::VarDesc >&
BlockDesc::vars() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.BlockDesc.vars)
  return vars_;
}

// repeated .paddle.framework.proto.OpDesc ops = 4;
inline int BlockDesc::_internal_ops_size() const {
  return ops_.size();
}
inline int BlockDesc::ops_size() const {
  return _internal_ops_size();
}
inline void BlockDesc::clear_ops() {
  ops_.Clear();
}
inline ::paddle::framework::proto::OpDesc* BlockDesc::mutable_ops(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.BlockDesc.ops)
  return ops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc >*
BlockDesc::mutable_ops() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.BlockDesc.ops)
  return &ops_;
}
inline const ::paddle::framework::proto::OpDesc& BlockDesc::_internal_ops(int index) const {
  return ops_.Get(index);
}
inline const ::paddle::framework::proto::OpDesc& BlockDesc::ops(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.BlockDesc.ops)
  return _internal_ops(index);
}
inline ::paddle::framework::proto::OpDesc* BlockDesc::_internal_add_ops() {
  return ops_.Add();
}
inline ::paddle::framework::proto::OpDesc* BlockDesc::add_ops() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.BlockDesc.ops)
  return _internal_add_ops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpDesc >&
BlockDesc::ops() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.BlockDesc.ops)
  return ops_;
}

// optional int32 forward_block_idx = 5 [default = -1];
inline bool BlockDesc::_internal_has_forward_block_idx() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BlockDesc::has_forward_block_idx() const {
  return _internal_has_forward_block_idx();
}
inline void BlockDesc::clear_forward_block_idx() {
  forward_block_idx_ = -1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::_internal_forward_block_idx() const {
  return forward_block_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockDesc::forward_block_idx() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.BlockDesc.forward_block_idx)
  return _internal_forward_block_idx();
}
inline void BlockDesc::_internal_set_forward_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  forward_block_idx_ = value;
}
inline void BlockDesc::set_forward_block_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_forward_block_idx(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.BlockDesc.forward_block_idx)
}

// -------------------------------------------------------------------

// OpVersion

// required int32 version = 1;
inline bool OpVersion::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpVersion::has_version() const {
  return _internal_has_version();
}
inline void OpVersion::clear_version() {
  version_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpVersion::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OpVersion::version() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpVersion.version)
  return _internal_version();
}
inline void OpVersion::_internal_set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  version_ = value;
}
inline void OpVersion::set_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpVersion.version)
}

// -------------------------------------------------------------------

// OpVersionMap_OpVersionPair

// required string op_name = 1;
inline bool OpVersionMap_OpVersionPair::_internal_has_op_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OpVersionMap_OpVersionPair::has_op_name() const {
  return _internal_has_op_name();
}
inline void OpVersionMap_OpVersionPair::clear_op_name() {
  op_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OpVersionMap_OpVersionPair::op_name() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
  return _internal_op_name();
}
inline void OpVersionMap_OpVersionPair::set_op_name(const std::string& value) {
  _internal_set_op_name(value);
  // @@protoc_insertion_point(field_set:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
}
inline std::string* OpVersionMap_OpVersionPair::mutable_op_name() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
  return _internal_mutable_op_name();
}
inline const std::string& OpVersionMap_OpVersionPair::_internal_op_name() const {
  return op_name_.Get();
}
inline void OpVersionMap_OpVersionPair::_internal_set_op_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void OpVersionMap_OpVersionPair::set_op_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
}
inline void OpVersionMap_OpVersionPair::set_op_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
}
inline void OpVersionMap_OpVersionPair::set_op_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
}
inline std::string* OpVersionMap_OpVersionPair::_internal_mutable_op_name() {
  _has_bits_[0] |= 0x00000001u;
  return op_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* OpVersionMap_OpVersionPair::release_op_name() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
  if (!_internal_has_op_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return op_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OpVersionMap_OpVersionPair::set_allocated_op_name(std::string* op_name) {
  if (op_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  op_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpVersionMap.OpVersionPair.op_name)
}

// required .paddle.framework.proto.OpVersion op_version = 2;
inline bool OpVersionMap_OpVersionPair::_internal_has_op_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || op_version_ != nullptr);
  return value;
}
inline bool OpVersionMap_OpVersionPair::has_op_version() const {
  return _internal_has_op_version();
}
inline void OpVersionMap_OpVersionPair::clear_op_version() {
  if (op_version_ != nullptr) op_version_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paddle::framework::proto::OpVersion& OpVersionMap_OpVersionPair::_internal_op_version() const {
  const ::paddle::framework::proto::OpVersion* p = op_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::OpVersion&>(
      ::paddle::framework::proto::_OpVersion_default_instance_);
}
inline const ::paddle::framework::proto::OpVersion& OpVersionMap_OpVersionPair::op_version() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpVersionMap.OpVersionPair.op_version)
  return _internal_op_version();
}
inline void OpVersionMap_OpVersionPair::unsafe_arena_set_allocated_op_version(
    ::paddle::framework::proto::OpVersion* op_version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_version_);
  }
  op_version_ = op_version;
  if (op_version) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.OpVersionMap.OpVersionPair.op_version)
}
inline ::paddle::framework::proto::OpVersion* OpVersionMap_OpVersionPair::release_op_version() {
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::OpVersion* temp = op_version_;
  op_version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::OpVersion* OpVersionMap_OpVersionPair::unsafe_arena_release_op_version() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.OpVersionMap.OpVersionPair.op_version)
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::OpVersion* temp = op_version_;
  op_version_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::OpVersion* OpVersionMap_OpVersionPair::_internal_mutable_op_version() {
  _has_bits_[0] |= 0x00000002u;
  if (op_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::OpVersion>(GetArena());
    op_version_ = p;
  }
  return op_version_;
}
inline ::paddle::framework::proto::OpVersion* OpVersionMap_OpVersionPair::mutable_op_version() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpVersionMap.OpVersionPair.op_version)
  return _internal_mutable_op_version();
}
inline void OpVersionMap_OpVersionPair::set_allocated_op_version(::paddle::framework::proto::OpVersion* op_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete op_version_;
  }
  if (op_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_version);
    if (message_arena != submessage_arena) {
      op_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  op_version_ = op_version;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.OpVersionMap.OpVersionPair.op_version)
}

// -------------------------------------------------------------------

// OpVersionMap

// repeated .paddle.framework.proto.OpVersionMap.OpVersionPair pair = 1;
inline int OpVersionMap::_internal_pair_size() const {
  return pair_.size();
}
inline int OpVersionMap::pair_size() const {
  return _internal_pair_size();
}
inline void OpVersionMap::clear_pair() {
  pair_.Clear();
}
inline ::paddle::framework::proto::OpVersionMap_OpVersionPair* OpVersionMap::mutable_pair(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.OpVersionMap.pair)
  return pair_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpVersionMap_OpVersionPair >*
OpVersionMap::mutable_pair() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.OpVersionMap.pair)
  return &pair_;
}
inline const ::paddle::framework::proto::OpVersionMap_OpVersionPair& OpVersionMap::_internal_pair(int index) const {
  return pair_.Get(index);
}
inline const ::paddle::framework::proto::OpVersionMap_OpVersionPair& OpVersionMap::pair(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.OpVersionMap.pair)
  return _internal_pair(index);
}
inline ::paddle::framework::proto::OpVersionMap_OpVersionPair* OpVersionMap::_internal_add_pair() {
  return pair_.Add();
}
inline ::paddle::framework::proto::OpVersionMap_OpVersionPair* OpVersionMap::add_pair() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.OpVersionMap.pair)
  return _internal_add_pair();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::OpVersionMap_OpVersionPair >&
OpVersionMap::pair() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.OpVersionMap.pair)
  return pair_;
}

// -------------------------------------------------------------------

// ProgramDesc

// repeated .paddle.framework.proto.BlockDesc blocks = 1;
inline int ProgramDesc::_internal_blocks_size() const {
  return blocks_.size();
}
inline int ProgramDesc::blocks_size() const {
  return _internal_blocks_size();
}
inline void ProgramDesc::clear_blocks() {
  blocks_.Clear();
}
inline ::paddle::framework::proto::BlockDesc* ProgramDesc::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.ProgramDesc.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::BlockDesc >*
ProgramDesc::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:paddle.framework.proto.ProgramDesc.blocks)
  return &blocks_;
}
inline const ::paddle::framework::proto::BlockDesc& ProgramDesc::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::paddle::framework::proto::BlockDesc& ProgramDesc::blocks(int index) const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.ProgramDesc.blocks)
  return _internal_blocks(index);
}
inline ::paddle::framework::proto::BlockDesc* ProgramDesc::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::paddle::framework::proto::BlockDesc* ProgramDesc::add_blocks() {
  // @@protoc_insertion_point(field_add:paddle.framework.proto.ProgramDesc.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::paddle::framework::proto::BlockDesc >&
ProgramDesc::blocks() const {
  // @@protoc_insertion_point(field_list:paddle.framework.proto.ProgramDesc.blocks)
  return blocks_;
}

// optional .paddle.framework.proto.Version version = 4;
inline bool ProgramDesc::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool ProgramDesc::has_version() const {
  return _internal_has_version();
}
inline void ProgramDesc::clear_version() {
  if (version_ != nullptr) version_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::paddle::framework::proto::Version& ProgramDesc::_internal_version() const {
  const ::paddle::framework::proto::Version* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::Version&>(
      ::paddle::framework::proto::_Version_default_instance_);
}
inline const ::paddle::framework::proto::Version& ProgramDesc::version() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.ProgramDesc.version)
  return _internal_version();
}
inline void ProgramDesc::unsafe_arena_set_allocated_version(
    ::paddle::framework::proto::Version* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.ProgramDesc.version)
}
inline ::paddle::framework::proto::Version* ProgramDesc::release_version() {
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::Version* temp = version_;
  version_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::Version* ProgramDesc::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.ProgramDesc.version)
  _has_bits_[0] &= ~0x00000001u;
  ::paddle::framework::proto::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::Version* ProgramDesc::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::Version>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::paddle::framework::proto::Version* ProgramDesc::mutable_version() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.ProgramDesc.version)
  return _internal_mutable_version();
}
inline void ProgramDesc::set_allocated_version(::paddle::framework::proto::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.ProgramDesc.version)
}

// optional .paddle.framework.proto.OpVersionMap op_version_map = 5;
inline bool ProgramDesc::_internal_has_op_version_map() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || op_version_map_ != nullptr);
  return value;
}
inline bool ProgramDesc::has_op_version_map() const {
  return _internal_has_op_version_map();
}
inline void ProgramDesc::clear_op_version_map() {
  if (op_version_map_ != nullptr) op_version_map_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::paddle::framework::proto::OpVersionMap& ProgramDesc::_internal_op_version_map() const {
  const ::paddle::framework::proto::OpVersionMap* p = op_version_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::paddle::framework::proto::OpVersionMap&>(
      ::paddle::framework::proto::_OpVersionMap_default_instance_);
}
inline const ::paddle::framework::proto::OpVersionMap& ProgramDesc::op_version_map() const {
  // @@protoc_insertion_point(field_get:paddle.framework.proto.ProgramDesc.op_version_map)
  return _internal_op_version_map();
}
inline void ProgramDesc::unsafe_arena_set_allocated_op_version_map(
    ::paddle::framework::proto::OpVersionMap* op_version_map) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_version_map_);
  }
  op_version_map_ = op_version_map;
  if (op_version_map) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:paddle.framework.proto.ProgramDesc.op_version_map)
}
inline ::paddle::framework::proto::OpVersionMap* ProgramDesc::release_op_version_map() {
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::OpVersionMap* temp = op_version_map_;
  op_version_map_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::paddle::framework::proto::OpVersionMap* ProgramDesc::unsafe_arena_release_op_version_map() {
  // @@protoc_insertion_point(field_release:paddle.framework.proto.ProgramDesc.op_version_map)
  _has_bits_[0] &= ~0x00000002u;
  ::paddle::framework::proto::OpVersionMap* temp = op_version_map_;
  op_version_map_ = nullptr;
  return temp;
}
inline ::paddle::framework::proto::OpVersionMap* ProgramDesc::_internal_mutable_op_version_map() {
  _has_bits_[0] |= 0x00000002u;
  if (op_version_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::paddle::framework::proto::OpVersionMap>(GetArena());
    op_version_map_ = p;
  }
  return op_version_map_;
}
inline ::paddle::framework::proto::OpVersionMap* ProgramDesc::mutable_op_version_map() {
  // @@protoc_insertion_point(field_mutable:paddle.framework.proto.ProgramDesc.op_version_map)
  return _internal_mutable_op_version_map();
}
inline void ProgramDesc::set_allocated_op_version_map(::paddle::framework::proto::OpVersionMap* op_version_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete op_version_map_;
  }
  if (op_version_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(op_version_map);
    if (message_arena != submessage_arena) {
      op_version_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op_version_map, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  op_version_map_ = op_version_map;
  // @@protoc_insertion_point(field_set_allocated:paddle.framework.proto.ProgramDesc.op_version_map)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace framework
}  // namespace paddle

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::paddle::framework::proto::VarType_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paddle::framework::proto::VarType_Type>() {
  return ::paddle::framework::proto::VarType_Type_descriptor();
}
template <> struct is_proto_enum< ::paddle::framework::proto::AttrType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::paddle::framework::proto::AttrType>() {
  return ::paddle::framework::proto::AttrType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_framework_2eproto
