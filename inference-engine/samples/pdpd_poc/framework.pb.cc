// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: framework.proto

#include "framework.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpDesc_Attr_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpDesc_Var_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpProto_Attr_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpProto_Var_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpVersion_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpVersionMap_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpVersionMap_OpVersionPair_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VarType_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_LoDTensorArrayDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_LoDTensorDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_ReaderDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarType_TensorDesc_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarType_Tuple_framework_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_framework_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_framework_2eproto;
namespace paddle {
namespace framework {
namespace proto {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class OpDesc_AttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDesc_Attr> _instance;
} _OpDesc_Attr_default_instance_;
class OpDesc_VarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDesc_Var> _instance;
} _OpDesc_Var_default_instance_;
class OpDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpDesc> _instance;
} _OpDesc_default_instance_;
class OpProto_VarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpProto_Var> _instance;
} _OpProto_Var_default_instance_;
class OpProto_AttrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpProto_Attr> _instance;
} _OpProto_Attr_default_instance_;
class OpProtoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpProto> _instance;
} _OpProto_default_instance_;
class VarType_TensorDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType_TensorDesc> _instance;
} _VarType_TensorDesc_default_instance_;
class VarType_LoDTensorDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType_LoDTensorDesc> _instance;
} _VarType_LoDTensorDesc_default_instance_;
class VarType_LoDTensorArrayDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType_LoDTensorArrayDesc> _instance;
} _VarType_LoDTensorArrayDesc_default_instance_;
class VarType_ReaderDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType_ReaderDesc> _instance;
} _VarType_ReaderDesc_default_instance_;
class VarType_TupleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType_Tuple> _instance;
} _VarType_Tuple_default_instance_;
class VarTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarType> _instance;
} _VarType_default_instance_;
class VarDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VarDesc> _instance;
} _VarDesc_default_instance_;
class BlockDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockDesc> _instance;
} _BlockDesc_default_instance_;
class OpVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpVersion> _instance;
} _OpVersion_default_instance_;
class OpVersionMap_OpVersionPairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpVersionMap_OpVersionPair> _instance;
} _OpVersionMap_OpVersionPair_default_instance_;
class OpVersionMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OpVersionMap> _instance;
} _OpVersionMap_default_instance_;
class ProgramDescDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProgramDesc> _instance;
} _ProgramDesc_default_instance_;
}  // namespace proto
}  // namespace framework
}  // namespace paddle
static void InitDefaultsscc_info_BlockDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_BlockDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::BlockDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_BlockDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_BlockDesc_framework_2eproto}, {
      &scc_info_VarDesc_framework_2eproto.base,
      &scc_info_OpDesc_framework_2eproto.base,}};

static void InitDefaultsscc_info_OpDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::OpDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OpDesc_framework_2eproto}, {
      &scc_info_OpDesc_Var_framework_2eproto.base,
      &scc_info_OpDesc_Attr_framework_2eproto.base,}};

static void InitDefaultsscc_info_OpDesc_Attr_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpDesc_Attr_default_instance_;
    new (ptr) ::paddle::framework::proto::OpDesc_Attr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpDesc_Attr_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpDesc_Attr_framework_2eproto}, {}};

static void InitDefaultsscc_info_OpDesc_Var_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpDesc_Var_default_instance_;
    new (ptr) ::paddle::framework::proto::OpDesc_Var();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpDesc_Var_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpDesc_Var_framework_2eproto}, {}};

static void InitDefaultsscc_info_OpProto_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpProto_default_instance_;
    new (ptr) ::paddle::framework::proto::OpProto();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OpProto_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OpProto_framework_2eproto}, {
      &scc_info_OpProto_Var_framework_2eproto.base,
      &scc_info_OpProto_Attr_framework_2eproto.base,}};

static void InitDefaultsscc_info_OpProto_Attr_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpProto_Attr_default_instance_;
    new (ptr) ::paddle::framework::proto::OpProto_Attr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpProto_Attr_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpProto_Attr_framework_2eproto}, {}};

static void InitDefaultsscc_info_OpProto_Var_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpProto_Var_default_instance_;
    new (ptr) ::paddle::framework::proto::OpProto_Var();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpProto_Var_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpProto_Var_framework_2eproto}, {}};

static void InitDefaultsscc_info_OpVersion_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpVersion_default_instance_;
    new (ptr) ::paddle::framework::proto::OpVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OpVersion_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OpVersion_framework_2eproto}, {}};

static void InitDefaultsscc_info_OpVersionMap_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpVersionMap_default_instance_;
    new (ptr) ::paddle::framework::proto::OpVersionMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpVersionMap_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpVersionMap_framework_2eproto}, {
      &scc_info_OpVersionMap_OpVersionPair_framework_2eproto.base,}};

static void InitDefaultsscc_info_OpVersionMap_OpVersionPair_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_OpVersionMap_OpVersionPair_default_instance_;
    new (ptr) ::paddle::framework::proto::OpVersionMap_OpVersionPair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OpVersionMap_OpVersionPair_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OpVersionMap_OpVersionPair_framework_2eproto}, {
      &scc_info_OpVersion_framework_2eproto.base,}};

static void InitDefaultsscc_info_ProgramDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_ProgramDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::ProgramDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ProgramDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ProgramDesc_framework_2eproto}, {
      &scc_info_BlockDesc_framework_2eproto.base,
      &scc_info_Version_framework_2eproto.base,
      &scc_info_OpVersionMap_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::VarDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarDesc_framework_2eproto}, {
      &scc_info_VarType_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarType_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_VarType_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_VarType_framework_2eproto}, {
      &scc_info_VarType_TensorDesc_framework_2eproto.base,
      &scc_info_VarType_LoDTensorDesc_framework_2eproto.base,
      &scc_info_VarType_LoDTensorArrayDesc_framework_2eproto.base,
      &scc_info_VarType_ReaderDesc_framework_2eproto.base,
      &scc_info_VarType_Tuple_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarType_LoDTensorArrayDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_LoDTensorArrayDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType_LoDTensorArrayDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_LoDTensorArrayDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarType_LoDTensorArrayDesc_framework_2eproto}, {
      &scc_info_VarType_TensorDesc_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarType_LoDTensorDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_LoDTensorDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType_LoDTensorDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_LoDTensorDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarType_LoDTensorDesc_framework_2eproto}, {
      &scc_info_VarType_TensorDesc_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarType_ReaderDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_ReaderDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType_ReaderDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VarType_ReaderDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VarType_ReaderDesc_framework_2eproto}, {
      &scc_info_VarType_LoDTensorDesc_framework_2eproto.base,}};

static void InitDefaultsscc_info_VarType_TensorDesc_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_TensorDesc_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType_TensorDesc();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarType_TensorDesc_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VarType_TensorDesc_framework_2eproto}, {}};

static void InitDefaultsscc_info_VarType_Tuple_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_VarType_Tuple_default_instance_;
    new (ptr) ::paddle::framework::proto::VarType_Tuple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VarType_Tuple_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VarType_Tuple_framework_2eproto}, {}};

static void InitDefaultsscc_info_Version_framework_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::paddle::framework::proto::_Version_default_instance_;
    new (ptr) ::paddle::framework::proto::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_framework_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_framework_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_framework_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_framework_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_framework_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_framework_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::Version, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::Version, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, name_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, i_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, f_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, s_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, ints_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, floats_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, strings_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, b_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, bools_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, block_idx_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, l_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, blocks_idx_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Attr, longs_),
  0,
  2,
  3,
  4,
  1,
  ~0u,
  ~0u,
  ~0u,
  5,
  ~0u,
  7,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Var, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Var, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Var, parameter_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc_Var, arguments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, inputs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, outputs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, attrs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpDesc, is_target_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, name_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, comment_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, duplicable_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, intermediate_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Var, dispensable_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, name_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, comment_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto_Attr, generated_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, inputs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, outputs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, attrs_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpProto, comment_),
  0,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_TensorDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_TensorDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_TensorDesc, data_type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_TensorDesc, dims_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorDesc, tensor_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorDesc, lod_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorArrayDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorArrayDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorArrayDesc, tensor_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_LoDTensorArrayDesc, lod_level_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_ReaderDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_ReaderDesc, lod_tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_Tuple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType_Tuple, element_type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, selected_rows_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, lod_tensor_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, tensor_array_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, reader_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarType, tuple_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, name_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, type_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, persistable_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::VarDesc, need_check_feed_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, idx_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, parent_idx_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, vars_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, ops_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::BlockDesc, forward_block_idx_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersion, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersion, version_),
  0,
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap_OpVersionPair, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap_OpVersionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap_OpVersionPair, op_name_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap_OpVersionPair, op_version_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::OpVersionMap, pair_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::ProgramDesc, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::ProgramDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::ProgramDesc, blocks_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::ProgramDesc, version_),
  PROTOBUF_FIELD_OFFSET(::paddle::framework::proto::ProgramDesc, op_version_map_),
  ~0u,
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::paddle::framework::proto::Version)},
  { 7, 26, sizeof(::paddle::framework::proto::OpDesc_Attr)},
  { 40, 47, sizeof(::paddle::framework::proto::OpDesc_Var)},
  { 49, 59, sizeof(::paddle::framework::proto::OpDesc)},
  { 64, 74, sizeof(::paddle::framework::proto::OpProto_Var)},
  { 79, 88, sizeof(::paddle::framework::proto::OpProto_Attr)},
  { 92, 102, sizeof(::paddle::framework::proto::OpProto)},
  { 107, 114, sizeof(::paddle::framework::proto::VarType_TensorDesc)},
  { 116, 123, sizeof(::paddle::framework::proto::VarType_LoDTensorDesc)},
  { 125, 132, sizeof(::paddle::framework::proto::VarType_LoDTensorArrayDesc)},
  { 134, -1, sizeof(::paddle::framework::proto::VarType_ReaderDesc)},
  { 140, -1, sizeof(::paddle::framework::proto::VarType_Tuple)},
  { 146, 157, sizeof(::paddle::framework::proto::VarType)},
  { 163, 172, sizeof(::paddle::framework::proto::VarDesc)},
  { 176, 186, sizeof(::paddle::framework::proto::BlockDesc)},
  { 191, 197, sizeof(::paddle::framework::proto::OpVersion)},
  { 198, 205, sizeof(::paddle::framework::proto::OpVersionMap_OpVersionPair)},
  { 207, -1, sizeof(::paddle::framework::proto::OpVersionMap)},
  { 213, 221, sizeof(::paddle::framework::proto::ProgramDesc)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpDesc_Attr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpDesc_Var_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpProto_Var_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpProto_Attr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_TensorDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_LoDTensorDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_LoDTensorArrayDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_ReaderDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_Tuple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_VarDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_BlockDesc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpVersion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpVersionMap_OpVersionPair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_OpVersionMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::paddle::framework::proto::_ProgramDesc_default_instance_),
};

const char descriptor_table_protodef_framework_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017framework.proto\022\026paddle.framework.prot"
  "o\"\035\n\007Version\022\022\n\007version\030\001 \001(\003:\0010\"\354\003\n\006OpD"
  "esc\022\014\n\004type\030\003 \002(\t\0222\n\006inputs\030\001 \003(\0132\".padd"
  "le.framework.proto.OpDesc.Var\0223\n\007outputs"
  "\030\002 \003(\0132\".paddle.framework.proto.OpDesc.V"
  "ar\0222\n\005attrs\030\004 \003(\0132#.paddle.framework.pro"
  "to.OpDesc.Attr\022\030\n\tis_target\030\005 \001(\010:\005false"
  "\032\357\001\n\004Attr\022\014\n\004name\030\001 \002(\t\022.\n\004type\030\002 \002(\0162 ."
  "paddle.framework.proto.AttrType\022\t\n\001i\030\003 \001"
  "(\005\022\t\n\001f\030\004 \001(\002\022\t\n\001s\030\005 \001(\t\022\014\n\004ints\030\006 \003(\005\022\016"
  "\n\006floats\030\007 \003(\002\022\017\n\007strings\030\010 \003(\t\022\t\n\001b\030\n \001"
  "(\010\022\r\n\005bools\030\013 \003(\010\022\021\n\tblock_idx\030\014 \001(\005\022\t\n\001"
  "l\030\r \001(\003\022\022\n\nblocks_idx\030\016 \003(\005\022\r\n\005longs\030\017 \003"
  "(\003\032+\n\003Var\022\021\n\tparameter\030\001 \002(\t\022\021\n\targument"
  "s\030\002 \003(\t\"\263\003\n\007OpProto\022\014\n\004type\030\001 \002(\t\0223\n\006inp"
  "uts\030\002 \003(\0132#.paddle.framework.proto.OpPro"
  "to.Var\0224\n\007outputs\030\003 \003(\0132#.paddle.framewo"
  "rk.proto.OpProto.Var\0223\n\005attrs\030\004 \003(\0132$.pa"
  "ddle.framework.proto.OpProto.Attr\022\017\n\007com"
  "ment\030\005 \002(\t\032x\n\003Var\022\014\n\004name\030\001 \002(\t\022\017\n\007comme"
  "nt\030\002 \002(\t\022\031\n\nduplicable\030\003 \001(\010:\005false\022\033\n\014i"
  "ntermediate\030\004 \001(\010:\005false\022\032\n\013dispensable\030"
  "\005 \001(\010:\005false\032o\n\004Attr\022\014\n\004name\030\001 \002(\t\022.\n\004ty"
  "pe\030\002 \002(\0162 .paddle.framework.proto.AttrTy"
  "pe\022\017\n\007comment\030\003 \002(\t\022\030\n\tgenerated\030\004 \001(\010:\005"
  "false\"\203\t\n\007VarType\0222\n\004type\030\001 \002(\0162$.paddle"
  ".framework.proto.VarType.Type\022A\n\rselecte"
  "d_rows\030\002 \001(\0132*.paddle.framework.proto.Va"
  "rType.TensorDesc\022A\n\nlod_tensor\030\003 \001(\0132-.p"
  "addle.framework.proto.VarType.LoDTensorD"
  "esc\022H\n\014tensor_array\030\004 \001(\01322.paddle.frame"
  "work.proto.VarType.LoDTensorArrayDesc\022:\n"
  "\006reader\030\005 \001(\0132*.paddle.framework.proto.V"
  "arType.ReaderDesc\0224\n\005tuple\030\007 \001(\0132%.paddl"
  "e.framework.proto.VarType.Tuple\032S\n\nTenso"
  "rDesc\0227\n\tdata_type\030\001 \002(\0162$.paddle.framew"
  "ork.proto.VarType.Type\022\014\n\004dims\030\002 \003(\003\032a\n\r"
  "LoDTensorDesc\022:\n\006tensor\030\001 \002(\0132*.paddle.f"
  "ramework.proto.VarType.TensorDesc\022\024\n\tlod"
  "_level\030\002 \001(\005:\0010\032f\n\022LoDTensorArrayDesc\022:\n"
  "\006tensor\030\001 \002(\0132*.paddle.framework.proto.V"
  "arType.TensorDesc\022\024\n\tlod_level\030\002 \001(\005:\0010\032"
  "O\n\nReaderDesc\022A\n\nlod_tensor\030\001 \003(\0132-.padd"
  "le.framework.proto.VarType.LoDTensorDesc"
  "\032C\n\005Tuple\022:\n\014element_type\030\001 \003(\0162$.paddle"
  ".framework.proto.VarType.Type\"\313\002\n\004Type\022\010"
  "\n\004BOOL\020\000\022\t\n\005INT16\020\001\022\t\n\005INT32\020\002\022\t\n\005INT64\020"
  "\003\022\010\n\004FP16\020\004\022\010\n\004FP32\020\005\022\010\n\004FP64\020\006\022\n\n\006SIZE_"
  "T\020\023\022\t\n\005UINT8\020\024\022\010\n\004INT8\020\025\022\010\n\004BF16\020\026\022\r\n\tCO"
  "MPLEX64\020\027\022\016\n\nCOMPLEX128\020\030\022\016\n\nLOD_TENSOR\020"
  "\007\022\021\n\rSELECTED_ROWS\020\010\022\022\n\016FEED_MINIBATCH\020\t"
  "\022\016\n\nFETCH_LIST\020\n\022\017\n\013STEP_SCOPES\020\013\022\022\n\016LOD"
  "_RANK_TABLE\020\014\022\024\n\020LOD_TENSOR_ARRAY\020\r\022\016\n\nP"
  "LACE_LIST\020\016\022\n\n\006READER\020\017\022\007\n\003RAW\020\021\022\t\n\005TUPL"
  "E\020\022\"\202\001\n\007VarDesc\022\014\n\004name\030\001 \002(\t\022-\n\004type\030\002 "
  "\002(\0132\037.paddle.framework.proto.VarType\022\032\n\013"
  "persistable\030\003 \001(\010:\005false\022\036\n\017need_check_f"
  "eed\030\004 \001(\010:\005false\"\247\001\n\tBlockDesc\022\013\n\003idx\030\001 "
  "\002(\005\022\022\n\nparent_idx\030\002 \002(\005\022-\n\004vars\030\003 \003(\0132\037."
  "paddle.framework.proto.VarDesc\022+\n\003ops\030\004 "
  "\003(\0132\036.paddle.framework.proto.OpDesc\022\035\n\021f"
  "orward_block_idx\030\005 \001(\005:\002-1\"\034\n\tOpVersion\022"
  "\017\n\007version\030\001 \002(\005\"\251\001\n\014OpVersionMap\022@\n\004pai"
  "r\030\001 \003(\01322.paddle.framework.proto.OpVersi"
  "onMap.OpVersionPair\032W\n\rOpVersionPair\022\017\n\007"
  "op_name\030\001 \002(\t\0225\n\nop_version\030\002 \002(\0132!.padd"
  "le.framework.proto.OpVersion\"\274\001\n\013Program"
  "Desc\0221\n\006blocks\030\001 \003(\0132!.paddle.framework."
  "proto.BlockDesc\0220\n\007version\030\004 \001(\0132\037.paddl"
  "e.framework.proto.Version\022<\n\016op_version_"
  "map\030\005 \001(\0132$.paddle.framework.proto.OpVer"
  "sionMapJ\004\010\002\020\003J\004\010\003\020\004*\224\001\n\010AttrType\022\007\n\003INT\020"
  "\000\022\t\n\005FLOAT\020\001\022\n\n\006STRING\020\002\022\010\n\004INTS\020\003\022\n\n\006FL"
  "OATS\020\004\022\013\n\007STRINGS\020\005\022\013\n\007BOOLEAN\020\006\022\014\n\010BOOL"
  "EANS\020\007\022\t\n\005BLOCK\020\010\022\010\n\004LONG\020\t\022\n\n\006BLOCKS\020\n\022"
  "\t\n\005LONGS\020\013"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_framework_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_framework_2eproto_sccs[19] = {
  &scc_info_BlockDesc_framework_2eproto.base,
  &scc_info_OpDesc_framework_2eproto.base,
  &scc_info_OpDesc_Attr_framework_2eproto.base,
  &scc_info_OpDesc_Var_framework_2eproto.base,
  &scc_info_OpProto_framework_2eproto.base,
  &scc_info_OpProto_Attr_framework_2eproto.base,
  &scc_info_OpProto_Var_framework_2eproto.base,
  &scc_info_OpVersion_framework_2eproto.base,
  &scc_info_OpVersionMap_framework_2eproto.base,
  &scc_info_OpVersionMap_OpVersionPair_framework_2eproto.base,
  &scc_info_ProgramDesc_framework_2eproto.base,
  &scc_info_VarDesc_framework_2eproto.base,
  &scc_info_VarType_framework_2eproto.base,
  &scc_info_VarType_LoDTensorArrayDesc_framework_2eproto.base,
  &scc_info_VarType_LoDTensorDesc_framework_2eproto.base,
  &scc_info_VarType_ReaderDesc_framework_2eproto.base,
  &scc_info_VarType_TensorDesc_framework_2eproto.base,
  &scc_info_VarType_Tuple_framework_2eproto.base,
  &scc_info_Version_framework_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_framework_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_framework_2eproto = {
  false, false, descriptor_table_protodef_framework_2eproto, "framework.proto", 3010,
  &descriptor_table_framework_2eproto_once, descriptor_table_framework_2eproto_sccs, descriptor_table_framework_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_framework_2eproto::offsets,
  file_level_metadata_framework_2eproto, 19, file_level_enum_descriptors_framework_2eproto, file_level_service_descriptors_framework_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_framework_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_framework_2eproto)), true);
namespace paddle {
namespace framework {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VarType_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_framework_2eproto);
  return file_level_enum_descriptors_framework_2eproto[0];
}
bool VarType_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr VarType_Type VarType::BOOL;
constexpr VarType_Type VarType::INT16;
constexpr VarType_Type VarType::INT32;
constexpr VarType_Type VarType::INT64;
constexpr VarType_Type VarType::FP16;
constexpr VarType_Type VarType::FP32;
constexpr VarType_Type VarType::FP64;
constexpr VarType_Type VarType::SIZE_T;
constexpr VarType_Type VarType::UINT8;
constexpr VarType_Type VarType::INT8;
constexpr VarType_Type VarType::BF16;
constexpr VarType_Type VarType::COMPLEX64;
constexpr VarType_Type VarType::COMPLEX128;
constexpr VarType_Type VarType::LOD_TENSOR;
constexpr VarType_Type VarType::SELECTED_ROWS;
constexpr VarType_Type VarType::FEED_MINIBATCH;
constexpr VarType_Type VarType::FETCH_LIST;
constexpr VarType_Type VarType::STEP_SCOPES;
constexpr VarType_Type VarType::LOD_RANK_TABLE;
constexpr VarType_Type VarType::LOD_TENSOR_ARRAY;
constexpr VarType_Type VarType::PLACE_LIST;
constexpr VarType_Type VarType::READER;
constexpr VarType_Type VarType::RAW;
constexpr VarType_Type VarType::TUPLE;
constexpr VarType_Type VarType::Type_MIN;
constexpr VarType_Type VarType::Type_MAX;
constexpr int VarType::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AttrType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_framework_2eproto);
  return file_level_enum_descriptors_framework_2eproto[1];
}
bool AttrType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Version::_Internal {
 public:
  using HasBits = decltype(std::declval<Version>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Version::Version(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.Version)
}

void Version::SharedCtor() {
  version_ = PROTOBUF_LONGLONG(0);
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.Version)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Version::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Version::ArenaDtor(void* object) {
  Version* _this = reinterpret_cast< Version* >(object);
  (void)_this;
}
void Version::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_framework_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 version = 1 [default = 0];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 version = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 version = 1 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpDesc_Attr::_Internal {
 public:
  using HasBits = decltype(std::declval<OpDesc_Attr>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_f(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_block_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_l(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

OpDesc_Attr::OpDesc_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ints_(arena),
  floats_(arena),
  strings_(arena),
  bools_(arena),
  blocks_idx_(arena),
  longs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpDesc.Attr)
}
OpDesc_Attr::OpDesc_Attr(const OpDesc_Attr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ints_(from.ints_),
      floats_(from.floats_),
      strings_(from.strings_),
      bools_(from.bools_),
      blocks_idx_(from.blocks_idx_),
      longs_(from.longs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s()) {
    s_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_s(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&block_idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(block_idx_));
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpDesc.Attr)
}

void OpDesc_Attr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpDesc_Attr_framework_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&block_idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(block_idx_));
}

OpDesc_Attr::~OpDesc_Attr() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpDesc.Attr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpDesc_Attr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpDesc_Attr::ArenaDtor(void* object) {
  OpDesc_Attr* _this = reinterpret_cast< OpDesc_Attr* >(object);
  (void)_this;
}
void OpDesc_Attr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpDesc_Attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpDesc_Attr& OpDesc_Attr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpDesc_Attr_framework_2eproto.base);
  return *internal_default_instance();
}


void OpDesc_Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpDesc.Attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ints_.Clear();
  floats_.Clear();
  strings_.Clear();
  bools_.Clear();
  blocks_idx_.Clear();
  longs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      s_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&block_idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(block_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDesc_Attr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.Attr.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .paddle.framework.proto.AttrType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::paddle::framework::proto::AttrType_IsValid(val))) {
            _internal_set_type(static_cast<::paddle::framework::proto::AttrType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 i = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float f = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_f(&has_bits);
          f_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string s = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.Attr.s");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 ints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float floats = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_floats(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<61>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_floats(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string strings = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_strings();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.Attr.strings");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool b = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool bools = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bools(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<88>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_bools(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 block_idx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_block_idx(&has_bits);
          block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 l = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_l(&has_bits);
          l_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 blocks_idx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_blocks_idx(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<112>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_blocks_idx(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 longs = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_longs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_longs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpDesc_Attr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpDesc.Attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.Attr.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .paddle.framework.proto.AttrType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional int32 i = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i(), target);
  }

  // optional float f = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_f(), target);
  }

  // optional string s = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s().data(), static_cast<int>(this->_internal_s().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.Attr.s");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_s(), target);
  }

  // repeated int32 ints = 6;
  for (int i = 0, n = this->_internal_ints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_ints(i), target);
  }

  // repeated float floats = 7;
  for (int i = 0, n = this->_internal_floats_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_floats(i), target);
  }

  // repeated string strings = 8;
  for (int i = 0, n = this->_internal_strings_size(); i < n; i++) {
    const auto& s = this->_internal_strings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.Attr.strings");
    target = stream->WriteString(8, s, target);
  }

  // optional bool b = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_b(), target);
  }

  // repeated bool bools = 11;
  for (int i = 0, n = this->_internal_bools_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_bools(i), target);
  }

  // optional int32 block_idx = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_block_idx(), target);
  }

  // optional int64 l = 13;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(13, this->_internal_l(), target);
  }

  // repeated int32 blocks_idx = 14;
  for (int i = 0, n = this->_internal_blocks_idx_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_blocks_idx(i), target);
  }

  // repeated int64 longs = 15;
  for (int i = 0, n = this->_internal_longs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(15, this->_internal_longs(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpDesc.Attr)
  return target;
}

size_t OpDesc_Attr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.OpDesc.Attr)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .paddle.framework.proto.AttrType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t OpDesc_Attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpDesc.Attr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .paddle.framework.proto.AttrType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ints = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->ints_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ints_size());
    total_size += data_size;
  }

  // repeated float floats = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_floats_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_floats_size());
    total_size += data_size;
  }

  // repeated string strings = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(strings_.size());
  for (int i = 0, n = strings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      strings_.Get(i));
  }

  // repeated bool bools = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bools_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bools_size());
    total_size += data_size;
  }

  // repeated int32 blocks_idx = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->blocks_idx_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_blocks_idx_size());
    total_size += data_size;
  }

  // repeated int64 longs = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->longs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_longs_size());
    total_size += data_size;
  }

  // optional string s = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_s());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional int32 i = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_i());
    }

    // optional float f = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool b = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional int64 l = 13;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_l());
    }

    // optional int32 block_idx = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_block_idx());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpDesc_Attr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpDesc.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDesc_Attr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpDesc_Attr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpDesc.Attr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpDesc.Attr)
    MergeFrom(*source);
  }
}

void OpDesc_Attr::MergeFrom(const OpDesc_Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpDesc.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ints_.MergeFrom(from.ints_);
  floats_.MergeFrom(from.floats_);
  strings_.MergeFrom(from.strings_);
  bools_.MergeFrom(from.bools_);
  blocks_idx_.MergeFrom(from.blocks_idx_);
  longs_.MergeFrom(from.longs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_s(from._internal_s());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000010u) {
      f_ = from.f_;
    }
    if (cached_has_bits & 0x00000020u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000040u) {
      l_ = from.l_;
    }
    if (cached_has_bits & 0x00000080u) {
      block_idx_ = from.block_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpDesc_Attr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpDesc.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDesc_Attr::CopyFrom(const OpDesc_Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpDesc.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDesc_Attr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpDesc_Attr::InternalSwap(OpDesc_Attr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ints_.InternalSwap(&other->ints_);
  floats_.InternalSwap(&other->floats_);
  strings_.InternalSwap(&other->strings_);
  bools_.InternalSwap(&other->bools_);
  blocks_idx_.InternalSwap(&other->blocks_idx_);
  longs_.InternalSwap(&other->longs_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpDesc_Attr, block_idx_)
      + sizeof(OpDesc_Attr::block_idx_)
      - PROTOBUF_FIELD_OFFSET(OpDesc_Attr, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDesc_Attr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpDesc_Var::_Internal {
 public:
  using HasBits = decltype(std::declval<OpDesc_Var>()._has_bits_);
  static void set_has_parameter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OpDesc_Var::OpDesc_Var(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  arguments_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpDesc.Var)
}
OpDesc_Var::OpDesc_Var(const OpDesc_Var& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      arguments_(from.arguments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_parameter()) {
    parameter_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parameter(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpDesc.Var)
}

void OpDesc_Var::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpDesc_Var_framework_2eproto.base);
  parameter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpDesc_Var::~OpDesc_Var() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpDesc.Var)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpDesc_Var::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  parameter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpDesc_Var::ArenaDtor(void* object) {
  OpDesc_Var* _this = reinterpret_cast< OpDesc_Var* >(object);
  (void)_this;
}
void OpDesc_Var::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpDesc_Var::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpDesc_Var& OpDesc_Var::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpDesc_Var_framework_2eproto.base);
  return *internal_default_instance();
}


void OpDesc_Var::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpDesc.Var)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arguments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    parameter_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDesc_Var::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parameter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.Var.parameter");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string arguments = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_arguments();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.Var.arguments");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpDesc_Var::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpDesc.Var)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_parameter().data(), static_cast<int>(this->_internal_parameter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.Var.parameter");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parameter(), target);
  }

  // repeated string arguments = 2;
  for (int i = 0, n = this->_internal_arguments_size(); i < n; i++) {
    const auto& s = this->_internal_arguments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.Var.arguments");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpDesc.Var)
  return target;
}

size_t OpDesc_Var::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpDesc.Var)
  size_t total_size = 0;

  // required string parameter = 1;
  if (_internal_has_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string arguments = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(arguments_.size());
  for (int i = 0, n = arguments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      arguments_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpDesc_Var::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpDesc.Var)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDesc_Var* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpDesc_Var>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpDesc.Var)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpDesc.Var)
    MergeFrom(*source);
  }
}

void OpDesc_Var::MergeFrom(const OpDesc_Var& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpDesc.Var)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arguments_.MergeFrom(from.arguments_);
  if (from._internal_has_parameter()) {
    _internal_set_parameter(from._internal_parameter());
  }
}

void OpDesc_Var::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpDesc.Var)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDesc_Var::CopyFrom(const OpDesc_Var& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpDesc.Var)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDesc_Var::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpDesc_Var::InternalSwap(OpDesc_Var* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  arguments_.InternalSwap(&other->arguments_);
  parameter_.Swap(&other->parameter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDesc_Var::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<OpDesc>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_target(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OpDesc::OpDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena),
  attrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpDesc)
}
OpDesc::OpDesc(const OpDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  is_target_ = from.is_target_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpDesc)
}

void OpDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpDesc_framework_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_target_ = false;
}

OpDesc::~OpDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpDesc::ArenaDtor(void* object) {
  OpDesc* _this = reinterpret_cast< OpDesc* >(object);
  (void)_this;
}
void OpDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpDesc& OpDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void OpDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  attrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    type_.ClearNonDefaultToEmpty();
  }
  is_target_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .paddle.framework.proto.OpDesc.Var inputs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpDesc.Var outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required string type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpDesc.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpDesc.Attr attrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool is_target = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_is_target(&has_bits);
          is_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.OpDesc.Var inputs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_inputs(i), target, stream);
  }

  // repeated .paddle.framework.proto.OpDesc.Var outputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_outputs(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required string type = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpDesc.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // repeated .paddle.framework.proto.OpDesc.Attr attrs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attrs(i), target, stream);
  }

  // optional bool is_target = 5 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpDesc)
  return target;
}

size_t OpDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpDesc)
  size_t total_size = 0;

  // required string type = 3;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.OpDesc.Var inputs = 1;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paddle.framework.proto.OpDesc.Var outputs = 2;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paddle.framework.proto.OpDesc.Attr attrs = 4;
  total_size += 1UL * this->_internal_attrs_size();
  for (const auto& msg : this->attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool is_target = 5 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const OpDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpDesc)
    MergeFrom(*source);
  }
}

void OpDesc::MergeFrom(const OpDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  attrs_.MergeFrom(from.attrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      is_target_ = from.is_target_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpDesc::CopyFrom(const OpDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attrs_)) return false;
  return true;
}

void OpDesc::InternalSwap(OpDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  attrs_.InternalSwap(&other->attrs_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(is_target_, other->is_target_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpProto_Var::_Internal {
 public:
  using HasBits = decltype(std::declval<OpProto_Var>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duplicable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_intermediate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dispensable(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

OpProto_Var::OpProto_Var(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpProto.Var)
}
OpProto_Var::OpProto_Var(const OpProto_Var& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  ::memcpy(&duplicable_, &from.duplicable_,
    static_cast<size_t>(reinterpret_cast<char*>(&dispensable_) -
    reinterpret_cast<char*>(&duplicable_)) + sizeof(dispensable_));
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpProto.Var)
}

void OpProto_Var::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpProto_Var_framework_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&duplicable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dispensable_) -
      reinterpret_cast<char*>(&duplicable_)) + sizeof(dispensable_));
}

OpProto_Var::~OpProto_Var() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpProto.Var)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpProto_Var::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpProto_Var::ArenaDtor(void* object) {
  OpProto_Var* _this = reinterpret_cast< OpProto_Var* >(object);
  (void)_this;
}
void OpProto_Var::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpProto_Var::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpProto_Var& OpProto_Var::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpProto_Var_framework_2eproto.base);
  return *internal_default_instance();
}


void OpProto_Var::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpProto.Var)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&duplicable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dispensable_) -
      reinterpret_cast<char*>(&duplicable_)) + sizeof(dispensable_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpProto_Var::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.Var.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string comment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.Var.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool duplicable = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_duplicable(&has_bits);
          duplicable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool intermediate = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_intermediate(&has_bits);
          intermediate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool dispensable = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_dispensable(&has_bits);
          dispensable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpProto_Var::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpProto.Var)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.Var.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string comment = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.Var.comment");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_comment(), target);
  }

  // optional bool duplicable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_duplicable(), target);
  }

  // optional bool intermediate = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_intermediate(), target);
  }

  // optional bool dispensable = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_dispensable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpProto.Var)
  return target;
}

size_t OpProto_Var::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.OpProto.Var)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_comment()) {
    // required string comment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  return total_size;
}
size_t OpProto_Var::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpProto.Var)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string comment = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bool duplicable = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool intermediate = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool dispensable = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpProto_Var::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpProto.Var)
  GOOGLE_DCHECK_NE(&from, this);
  const OpProto_Var* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpProto_Var>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpProto.Var)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpProto.Var)
    MergeFrom(*source);
  }
}

void OpProto_Var::MergeFrom(const OpProto_Var& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpProto.Var)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      duplicable_ = from.duplicable_;
    }
    if (cached_has_bits & 0x00000008u) {
      intermediate_ = from.intermediate_;
    }
    if (cached_has_bits & 0x00000010u) {
      dispensable_ = from.dispensable_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpProto_Var::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpProto.Var)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpProto_Var::CopyFrom(const OpProto_Var& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpProto.Var)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpProto_Var::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpProto_Var::InternalSwap(OpProto_Var* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpProto_Var, dispensable_)
      + sizeof(OpProto_Var::dispensable_)
      - PROTOBUF_FIELD_OFFSET(OpProto_Var, duplicable_)>(
          reinterpret_cast<char*>(&duplicable_),
          reinterpret_cast<char*>(&other->duplicable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpProto_Var::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpProto_Attr::_Internal {
 public:
  using HasBits = decltype(std::declval<OpProto_Attr>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_generated(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

OpProto_Attr::OpProto_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpProto.Attr)
}
OpProto_Attr::OpProto_Attr(const OpProto_Attr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&generated_) -
    reinterpret_cast<char*>(&type_)) + sizeof(generated_));
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpProto.Attr)
}

void OpProto_Attr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpProto_Attr_framework_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&generated_) -
      reinterpret_cast<char*>(&type_)) + sizeof(generated_));
}

OpProto_Attr::~OpProto_Attr() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpProto.Attr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpProto_Attr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpProto_Attr::ArenaDtor(void* object) {
  OpProto_Attr* _this = reinterpret_cast< OpProto_Attr* >(object);
  (void)_this;
}
void OpProto_Attr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpProto_Attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpProto_Attr& OpProto_Attr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpProto_Attr_framework_2eproto.base);
  return *internal_default_instance();
}


void OpProto_Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpProto.Attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&generated_) -
        reinterpret_cast<char*>(&type_)) + sizeof(generated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpProto_Attr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.Attr.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .paddle.framework.proto.AttrType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::paddle::framework::proto::AttrType_IsValid(val))) {
            _internal_set_type(static_cast<::paddle::framework::proto::AttrType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string comment = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.Attr.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool generated = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_generated(&has_bits);
          generated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpProto_Attr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpProto.Attr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.Attr.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .paddle.framework.proto.AttrType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // required string comment = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.Attr.comment");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_comment(), target);
  }

  // optional bool generated = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_generated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpProto.Attr)
  return target;
}

size_t OpProto_Attr::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.OpProto.Attr)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_comment()) {
    // required string comment = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  if (_internal_has_type()) {
    // required .paddle.framework.proto.AttrType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t OpProto_Attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpProto.Attr)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string comment = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());

    // required .paddle.framework.proto.AttrType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool generated = 4 [default = false];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpProto_Attr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpProto.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  const OpProto_Attr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpProto_Attr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpProto.Attr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpProto.Attr)
    MergeFrom(*source);
  }
}

void OpProto_Attr::MergeFrom(const OpProto_Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpProto.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      generated_ = from.generated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OpProto_Attr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpProto.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpProto_Attr::CopyFrom(const OpProto_Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpProto.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpProto_Attr::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpProto_Attr::InternalSwap(OpProto_Attr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OpProto_Attr, generated_)
      + sizeof(OpProto_Attr::generated_)
      - PROTOBUF_FIELD_OFFSET(OpProto_Attr, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OpProto_Attr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpProto::_Internal {
 public:
  using HasBits = decltype(std::declval<OpProto>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_comment(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

OpProto::OpProto(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  inputs_(arena),
  outputs_(arena),
  attrs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpProto)
}
OpProto::OpProto(const OpProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_),
      outputs_(from.outputs_),
      attrs_(from.attrs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_type()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_comment()) {
    comment_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_comment(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpProto)
}

void OpProto::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpProto_framework_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

OpProto::~OpProto() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpProto)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpProto::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OpProto::ArenaDtor(void* object) {
  OpProto* _this = reinterpret_cast< OpProto* >(object);
  (void)_this;
}
void OpProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpProto& OpProto::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpProto_framework_2eproto.base);
  return *internal_default_instance();
}


void OpProto::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  outputs_.Clear();
  attrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      comment_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpProto.Var inputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpProto.Var outputs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_outputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpProto.Attr attrs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // required string comment = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_comment();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpProto.comment");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpProto::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpProto)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // repeated .paddle.framework.proto.OpProto.Var inputs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_inputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_inputs(i), target, stream);
  }

  // repeated .paddle.framework.proto.OpProto.Var outputs = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_outputs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_outputs(i), target, stream);
  }

  // repeated .paddle.framework.proto.OpProto.Attr attrs = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_attrs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_attrs(i), target, stream);
  }

  // required string comment = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_comment().data(), static_cast<int>(this->_internal_comment().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpProto.comment");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_comment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpProto)
  return target;
}

size_t OpProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.OpProto)
  size_t total_size = 0;

  if (_internal_has_type()) {
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (_internal_has_comment()) {
    // required string comment = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());
  }

  return total_size;
}
size_t OpProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());

    // required string comment = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_comment());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.OpProto.Var inputs = 2;
  total_size += 1UL * this->_internal_inputs_size();
  for (const auto& msg : this->inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paddle.framework.proto.OpProto.Var outputs = 3;
  total_size += 1UL * this->_internal_outputs_size();
  for (const auto& msg : this->outputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paddle.framework.proto.OpProto.Attr attrs = 4;
  total_size += 1UL * this->_internal_attrs_size();
  for (const auto& msg : this->attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpProto::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpProto)
  GOOGLE_DCHECK_NE(&from, this);
  const OpProto* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpProto>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpProto)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpProto)
    MergeFrom(*source);
  }
}

void OpProto::MergeFrom(const OpProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  outputs_.MergeFrom(from.outputs_);
  attrs_.MergeFrom(from.attrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_type(from._internal_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_comment(from._internal_comment());
    }
  }
}

void OpProto::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpProto::CopyFrom(const OpProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(inputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(outputs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(attrs_)) return false;
  return true;
}

void OpProto::InternalSwap(OpProto* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inputs_.InternalSwap(&other->inputs_);
  outputs_.InternalSwap(&other->outputs_);
  attrs_.InternalSwap(&other->attrs_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  comment_.Swap(&other->comment_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata OpProto::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType_TensorDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<VarType_TensorDesc>()._has_bits_);
  static void set_has_data_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

VarType_TensorDesc::VarType_TensorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dims_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType.TensorDesc)
}
VarType_TensorDesc::VarType_TensorDesc(const VarType_TensorDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dims_(from.dims_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_type_ = from.data_type_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType.TensorDesc)
}

void VarType_TensorDesc::SharedCtor() {
  data_type_ = 0;
}

VarType_TensorDesc::~VarType_TensorDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType.TensorDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType_TensorDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VarType_TensorDesc::ArenaDtor(void* object) {
  VarType_TensorDesc* _this = reinterpret_cast< VarType_TensorDesc* >(object);
  (void)_this;
}
void VarType_TensorDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType_TensorDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType_TensorDesc& VarType_TensorDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_TensorDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType_TensorDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType.TensorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dims_.Clear();
  data_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType_TensorDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .paddle.framework.proto.VarType.Type data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::paddle::framework::proto::VarType_Type_IsValid(val))) {
            _internal_set_data_type(static_cast<::paddle::framework::proto::VarType_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated int64 dims = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dims(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dims(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType_TensorDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType.TensorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .paddle.framework.proto.VarType.Type data_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_data_type(), target);
  }

  // repeated int64 dims = 2;
  for (int i = 0, n = this->_internal_dims_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_dims(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType.TensorDesc)
  return target;
}

size_t VarType_TensorDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType.TensorDesc)
  size_t total_size = 0;

  // required .paddle.framework.proto.VarType.Type data_type = 1;
  if (_internal_has_data_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dims = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->dims_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_dims_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType_TensorDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType.TensorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType_TensorDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType_TensorDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType.TensorDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType.TensorDesc)
    MergeFrom(*source);
  }
}

void VarType_TensorDesc::MergeFrom(const VarType_TensorDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType.TensorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dims_.MergeFrom(from.dims_);
  if (from._internal_has_data_type()) {
    _internal_set_data_type(from._internal_data_type());
  }
}

void VarType_TensorDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType.TensorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType_TensorDesc::CopyFrom(const VarType_TensorDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType.TensorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType_TensorDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VarType_TensorDesc::InternalSwap(VarType_TensorDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dims_.InternalSwap(&other->dims_);
  swap(data_type_, other->data_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType_TensorDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType_LoDTensorDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<VarType_LoDTensorDesc>()._has_bits_);
  static const ::paddle::framework::proto::VarType_TensorDesc& tensor(const VarType_LoDTensorDesc* msg);
  static void set_has_tensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lod_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::paddle::framework::proto::VarType_TensorDesc&
VarType_LoDTensorDesc::_Internal::tensor(const VarType_LoDTensorDesc* msg) {
  return *msg->tensor_;
}
VarType_LoDTensorDesc::VarType_LoDTensorDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType.LoDTensorDesc)
}
VarType_LoDTensorDesc::VarType_LoDTensorDesc(const VarType_LoDTensorDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor()) {
    tensor_ = new ::paddle::framework::proto::VarType_TensorDesc(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  lod_level_ = from.lod_level_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType.LoDTensorDesc)
}

void VarType_LoDTensorDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarType_LoDTensorDesc_framework_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lod_level_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(lod_level_));
}

VarType_LoDTensorDesc::~VarType_LoDTensorDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType.LoDTensorDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType_LoDTensorDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tensor_;
}

void VarType_LoDTensorDesc::ArenaDtor(void* object) {
  VarType_LoDTensorDesc* _this = reinterpret_cast< VarType_LoDTensorDesc* >(object);
  (void)_this;
}
void VarType_LoDTensorDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType_LoDTensorDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType_LoDTensorDesc& VarType_LoDTensorDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_LoDTensorDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType_LoDTensorDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType.LoDTensorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tensor_ != nullptr);
    tensor_->Clear();
  }
  lod_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType_LoDTensorDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lod_level = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lod_level(&has_bits);
          lod_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType_LoDTensorDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType.LoDTensorDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tensor(this), target, stream);
  }

  // optional int32 lod_level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lod_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType.LoDTensorDesc)
  return target;
}

size_t VarType_LoDTensorDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType.LoDTensorDesc)
  size_t total_size = 0;

  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  if (_internal_has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lod_level = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lod_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType_LoDTensorDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType.LoDTensorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType_LoDTensorDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType_LoDTensorDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType.LoDTensorDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType.LoDTensorDesc)
    MergeFrom(*source);
  }
}

void VarType_LoDTensorDesc::MergeFrom(const VarType_LoDTensorDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType.LoDTensorDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tensor()->::paddle::framework::proto::VarType_TensorDesc::MergeFrom(from._internal_tensor());
    }
    if (cached_has_bits & 0x00000002u) {
      lod_level_ = from.lod_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarType_LoDTensorDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType.LoDTensorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType_LoDTensorDesc::CopyFrom(const VarType_LoDTensorDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType.LoDTensorDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType_LoDTensorDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tensor()) {
    if (!tensor_->IsInitialized()) return false;
  }
  return true;
}

void VarType_LoDTensorDesc::InternalSwap(VarType_LoDTensorDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarType_LoDTensorDesc, lod_level_)
      + sizeof(VarType_LoDTensorDesc::lod_level_)
      - PROTOBUF_FIELD_OFFSET(VarType_LoDTensorDesc, tensor_)>(
          reinterpret_cast<char*>(&tensor_),
          reinterpret_cast<char*>(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType_LoDTensorDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType_LoDTensorArrayDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<VarType_LoDTensorArrayDesc>()._has_bits_);
  static const ::paddle::framework::proto::VarType_TensorDesc& tensor(const VarType_LoDTensorArrayDesc* msg);
  static void set_has_tensor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lod_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::paddle::framework::proto::VarType_TensorDesc&
VarType_LoDTensorArrayDesc::_Internal::tensor(const VarType_LoDTensorArrayDesc* msg) {
  return *msg->tensor_;
}
VarType_LoDTensorArrayDesc::VarType_LoDTensorArrayDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType.LoDTensorArrayDesc)
}
VarType_LoDTensorArrayDesc::VarType_LoDTensorArrayDesc(const VarType_LoDTensorArrayDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor()) {
    tensor_ = new ::paddle::framework::proto::VarType_TensorDesc(*from.tensor_);
  } else {
    tensor_ = nullptr;
  }
  lod_level_ = from.lod_level_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType.LoDTensorArrayDesc)
}

void VarType_LoDTensorArrayDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarType_LoDTensorArrayDesc_framework_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tensor_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&lod_level_) -
      reinterpret_cast<char*>(&tensor_)) + sizeof(lod_level_));
}

VarType_LoDTensorArrayDesc::~VarType_LoDTensorArrayDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType_LoDTensorArrayDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tensor_;
}

void VarType_LoDTensorArrayDesc::ArenaDtor(void* object) {
  VarType_LoDTensorArrayDesc* _this = reinterpret_cast< VarType_LoDTensorArrayDesc* >(object);
  (void)_this;
}
void VarType_LoDTensorArrayDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType_LoDTensorArrayDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType_LoDTensorArrayDesc& VarType_LoDTensorArrayDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_LoDTensorArrayDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType_LoDTensorArrayDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(tensor_ != nullptr);
    tensor_->Clear();
  }
  lod_level_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType_LoDTensorArrayDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lod_level = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lod_level(&has_bits);
          lod_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType_LoDTensorArrayDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tensor(this), target, stream);
  }

  // optional int32 lod_level = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_lod_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  return target;
}

size_t VarType_LoDTensorArrayDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  size_t total_size = 0;

  // required .paddle.framework.proto.VarType.TensorDesc tensor = 1;
  if (_internal_has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tensor_);
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 lod_level = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_lod_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType_LoDTensorArrayDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType_LoDTensorArrayDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType_LoDTensorArrayDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType.LoDTensorArrayDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType.LoDTensorArrayDesc)
    MergeFrom(*source);
  }
}

void VarType_LoDTensorArrayDesc::MergeFrom(const VarType_LoDTensorArrayDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tensor()->::paddle::framework::proto::VarType_TensorDesc::MergeFrom(from._internal_tensor());
    }
    if (cached_has_bits & 0x00000002u) {
      lod_level_ = from.lod_level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarType_LoDTensorArrayDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType_LoDTensorArrayDesc::CopyFrom(const VarType_LoDTensorArrayDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType.LoDTensorArrayDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType_LoDTensorArrayDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tensor()) {
    if (!tensor_->IsInitialized()) return false;
  }
  return true;
}

void VarType_LoDTensorArrayDesc::InternalSwap(VarType_LoDTensorArrayDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarType_LoDTensorArrayDesc, lod_level_)
      + sizeof(VarType_LoDTensorArrayDesc::lod_level_)
      - PROTOBUF_FIELD_OFFSET(VarType_LoDTensorArrayDesc, tensor_)>(
          reinterpret_cast<char*>(&tensor_),
          reinterpret_cast<char*>(&other->tensor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType_LoDTensorArrayDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType_ReaderDesc::_Internal {
 public:
};

VarType_ReaderDesc::VarType_ReaderDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lod_tensor_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType.ReaderDesc)
}
VarType_ReaderDesc::VarType_ReaderDesc(const VarType_ReaderDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      lod_tensor_(from.lod_tensor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType.ReaderDesc)
}

void VarType_ReaderDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarType_ReaderDesc_framework_2eproto.base);
}

VarType_ReaderDesc::~VarType_ReaderDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType.ReaderDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType_ReaderDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VarType_ReaderDesc::ArenaDtor(void* object) {
  VarType_ReaderDesc* _this = reinterpret_cast< VarType_ReaderDesc* >(object);
  (void)_this;
}
void VarType_ReaderDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType_ReaderDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType_ReaderDesc& VarType_ReaderDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_ReaderDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType_ReaderDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType.ReaderDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lod_tensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType_ReaderDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lod_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType_ReaderDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType.ReaderDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lod_tensor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_lod_tensor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType.ReaderDesc)
  return target;
}

size_t VarType_ReaderDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType.ReaderDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 1;
  total_size += 1UL * this->_internal_lod_tensor_size();
  for (const auto& msg : this->lod_tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType_ReaderDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType.ReaderDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType_ReaderDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType_ReaderDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType.ReaderDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType.ReaderDesc)
    MergeFrom(*source);
  }
}

void VarType_ReaderDesc::MergeFrom(const VarType_ReaderDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType.ReaderDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lod_tensor_.MergeFrom(from.lod_tensor_);
}

void VarType_ReaderDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType.ReaderDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType_ReaderDesc::CopyFrom(const VarType_ReaderDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType.ReaderDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType_ReaderDesc::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(lod_tensor_)) return false;
  return true;
}

void VarType_ReaderDesc::InternalSwap(VarType_ReaderDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  lod_tensor_.InternalSwap(&other->lod_tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType_ReaderDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType_Tuple::_Internal {
 public:
};

VarType_Tuple::VarType_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  element_type_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType.Tuple)
}
VarType_Tuple::VarType_Tuple(const VarType_Tuple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      element_type_(from.element_type_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType.Tuple)
}

void VarType_Tuple::SharedCtor() {
}

VarType_Tuple::~VarType_Tuple() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType.Tuple)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType_Tuple::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VarType_Tuple::ArenaDtor(void* object) {
  VarType_Tuple* _this = reinterpret_cast< VarType_Tuple* >(object);
  (void)_this;
}
void VarType_Tuple::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType_Tuple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType_Tuple& VarType_Tuple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_Tuple_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType_Tuple::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  element_type_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType_Tuple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .paddle.framework.proto.VarType.Type element_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::paddle::framework::proto::VarType_Type_IsValid(val))) {
              _internal_add_element_type(static_cast<::paddle::framework::proto::VarType_Type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_element_type(), ptr, ctx, ::paddle::framework::proto::VarType_Type_IsValid, &_internal_metadata_, 1);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType_Tuple::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType.Tuple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.VarType.Type element_type = 1;
  for (int i = 0, n = this->_internal_element_type_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        1, this->_internal_element_type(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType.Tuple)
  return target;
}

size_t VarType_Tuple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType.Tuple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.VarType.Type element_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_element_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_element_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType_Tuple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType_Tuple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType_Tuple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType.Tuple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType.Tuple)
    MergeFrom(*source);
  }
}

void VarType_Tuple::MergeFrom(const VarType_Tuple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType.Tuple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  element_type_.MergeFrom(from.element_type_);
}

void VarType_Tuple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType_Tuple::CopyFrom(const VarType_Tuple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType.Tuple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType_Tuple::IsInitialized() const {
  return true;
}

void VarType_Tuple::InternalSwap(VarType_Tuple* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  element_type_.InternalSwap(&other->element_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType_Tuple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarType::_Internal {
 public:
  using HasBits = decltype(std::declval<VarType>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::paddle::framework::proto::VarType_TensorDesc& selected_rows(const VarType* msg);
  static void set_has_selected_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::paddle::framework::proto::VarType_LoDTensorDesc& lod_tensor(const VarType* msg);
  static void set_has_lod_tensor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::paddle::framework::proto::VarType_LoDTensorArrayDesc& tensor_array(const VarType* msg);
  static void set_has_tensor_array(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::paddle::framework::proto::VarType_ReaderDesc& reader(const VarType* msg);
  static void set_has_reader(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::paddle::framework::proto::VarType_Tuple& tuple(const VarType* msg);
  static void set_has_tuple(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::paddle::framework::proto::VarType_TensorDesc&
VarType::_Internal::selected_rows(const VarType* msg) {
  return *msg->selected_rows_;
}
const ::paddle::framework::proto::VarType_LoDTensorDesc&
VarType::_Internal::lod_tensor(const VarType* msg) {
  return *msg->lod_tensor_;
}
const ::paddle::framework::proto::VarType_LoDTensorArrayDesc&
VarType::_Internal::tensor_array(const VarType* msg) {
  return *msg->tensor_array_;
}
const ::paddle::framework::proto::VarType_ReaderDesc&
VarType::_Internal::reader(const VarType* msg) {
  return *msg->reader_;
}
const ::paddle::framework::proto::VarType_Tuple&
VarType::_Internal::tuple(const VarType* msg) {
  return *msg->tuple_;
}
VarType::VarType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarType)
}
VarType::VarType(const VarType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_selected_rows()) {
    selected_rows_ = new ::paddle::framework::proto::VarType_TensorDesc(*from.selected_rows_);
  } else {
    selected_rows_ = nullptr;
  }
  if (from._internal_has_lod_tensor()) {
    lod_tensor_ = new ::paddle::framework::proto::VarType_LoDTensorDesc(*from.lod_tensor_);
  } else {
    lod_tensor_ = nullptr;
  }
  if (from._internal_has_tensor_array()) {
    tensor_array_ = new ::paddle::framework::proto::VarType_LoDTensorArrayDesc(*from.tensor_array_);
  } else {
    tensor_array_ = nullptr;
  }
  if (from._internal_has_reader()) {
    reader_ = new ::paddle::framework::proto::VarType_ReaderDesc(*from.reader_);
  } else {
    reader_ = nullptr;
  }
  if (from._internal_has_tuple()) {
    tuple_ = new ::paddle::framework::proto::VarType_Tuple(*from.tuple_);
  } else {
    tuple_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarType)
}

void VarType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarType_framework_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&selected_rows_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&selected_rows_)) + sizeof(type_));
}

VarType::~VarType() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarType)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarType::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete selected_rows_;
  if (this != internal_default_instance()) delete lod_tensor_;
  if (this != internal_default_instance()) delete tensor_array_;
  if (this != internal_default_instance()) delete reader_;
  if (this != internal_default_instance()) delete tuple_;
}

void VarType::ArenaDtor(void* object) {
  VarType* _this = reinterpret_cast< VarType* >(object);
  (void)_this;
}
void VarType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarType& VarType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarType_framework_2eproto.base);
  return *internal_default_instance();
}


void VarType::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(selected_rows_ != nullptr);
      selected_rows_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(lod_tensor_ != nullptr);
      lod_tensor_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(tensor_array_ != nullptr);
      tensor_array_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(reader_ != nullptr);
      reader_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(tuple_ != nullptr);
      tuple_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .paddle.framework.proto.VarType.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::paddle::framework::proto::VarType_Type_IsValid(val))) {
            _internal_set_type(static_cast<::paddle::framework::proto::VarType_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.VarType.TensorDesc selected_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_rows(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lod_tensor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.VarType.LoDTensorArrayDesc tensor_array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_array(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.VarType.ReaderDesc reader = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_reader(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.VarType.Tuple tuple = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .paddle.framework.proto.VarType.Type type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .paddle.framework.proto.VarType.TensorDesc selected_rows = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::selected_rows(this), target, stream);
  }

  // optional .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lod_tensor(this), target, stream);
  }

  // optional .paddle.framework.proto.VarType.LoDTensorArrayDesc tensor_array = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::tensor_array(this), target, stream);
  }

  // optional .paddle.framework.proto.VarType.ReaderDesc reader = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::reader(this), target, stream);
  }

  // optional .paddle.framework.proto.VarType.Tuple tuple = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::tuple(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarType)
  return target;
}

size_t VarType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarType)
  size_t total_size = 0;

  // required .paddle.framework.proto.VarType.Type type = 1;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .paddle.framework.proto.VarType.TensorDesc selected_rows = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_rows_);
    }

    // optional .paddle.framework.proto.VarType.LoDTensorDesc lod_tensor = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lod_tensor_);
    }

    // optional .paddle.framework.proto.VarType.LoDTensorArrayDesc tensor_array = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tensor_array_);
    }

    // optional .paddle.framework.proto.VarType.ReaderDesc reader = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *reader_);
    }

    // optional .paddle.framework.proto.VarType.Tuple tuple = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tuple_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarType)
  GOOGLE_DCHECK_NE(&from, this);
  const VarType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarType)
    MergeFrom(*source);
  }
}

void VarType::MergeFrom(const VarType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_selected_rows()->::paddle::framework::proto::VarType_TensorDesc::MergeFrom(from._internal_selected_rows());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_lod_tensor()->::paddle::framework::proto::VarType_LoDTensorDesc::MergeFrom(from._internal_lod_tensor());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_tensor_array()->::paddle::framework::proto::VarType_LoDTensorArrayDesc::MergeFrom(from._internal_tensor_array());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_reader()->::paddle::framework::proto::VarType_ReaderDesc::MergeFrom(from._internal_reader());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_tuple()->::paddle::framework::proto::VarType_Tuple::MergeFrom(from._internal_tuple());
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarType::CopyFrom(const VarType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_selected_rows()) {
    if (!selected_rows_->IsInitialized()) return false;
  }
  if (_internal_has_lod_tensor()) {
    if (!lod_tensor_->IsInitialized()) return false;
  }
  if (_internal_has_tensor_array()) {
    if (!tensor_array_->IsInitialized()) return false;
  }
  if (_internal_has_reader()) {
    if (!reader_->IsInitialized()) return false;
  }
  return true;
}

void VarType::InternalSwap(VarType* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarType, type_)
      + sizeof(VarType::type_)
      - PROTOBUF_FIELD_OFFSET(VarType, selected_rows_)>(
          reinterpret_cast<char*>(&selected_rows_),
          reinterpret_cast<char*>(&other->selected_rows_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VarDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<VarDesc>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::paddle::framework::proto::VarType& type(const VarDesc* msg);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_persistable(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_need_check_feed(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::paddle::framework::proto::VarType&
VarDesc::_Internal::type(const VarDesc* msg) {
  return *msg->type_;
}
VarDesc::VarDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.VarDesc)
}
VarDesc::VarDesc(const VarDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_type()) {
    type_ = new ::paddle::framework::proto::VarType(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&persistable_, &from.persistable_,
    static_cast<size_t>(reinterpret_cast<char*>(&need_check_feed_) -
    reinterpret_cast<char*>(&persistable_)) + sizeof(need_check_feed_));
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.VarDesc)
}

void VarDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VarDesc_framework_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&need_check_feed_) -
      reinterpret_cast<char*>(&type_)) + sizeof(need_check_feed_));
}

VarDesc::~VarDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.VarDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VarDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void VarDesc::ArenaDtor(void* object) {
  VarDesc* _this = reinterpret_cast< VarDesc* >(object);
  (void)_this;
}
void VarDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VarDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VarDesc& VarDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VarDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void VarDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.VarDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(type_ != nullptr);
      type_->Clear();
    }
  }
  ::memset(&persistable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&need_check_feed_) -
      reinterpret_cast<char*>(&persistable_)) + sizeof(need_check_feed_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VarDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.VarDesc.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .paddle.framework.proto.VarType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool persistable = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_persistable(&has_bits);
          persistable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool need_check_feed = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_need_check_feed(&has_bits);
          need_check_feed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VarDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.VarDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.VarDesc.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required .paddle.framework.proto.VarType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // optional bool persistable = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_persistable(), target);
  }

  // optional bool need_check_feed = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_need_check_feed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.VarDesc)
  return target;
}

size_t VarDesc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.VarDesc)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_type()) {
    // required .paddle.framework.proto.VarType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  return total_size;
}
size_t VarDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.VarDesc)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required .paddle.framework.proto.VarType type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bool persistable = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool need_check_feed = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VarDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.VarDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const VarDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VarDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.VarDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.VarDesc)
    MergeFrom(*source);
  }
}

void VarDesc::MergeFrom(const VarDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.VarDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_type()->::paddle::framework::proto::VarType::MergeFrom(from._internal_type());
    }
    if (cached_has_bits & 0x00000004u) {
      persistable_ = from.persistable_;
    }
    if (cached_has_bits & 0x00000008u) {
      need_check_feed_ = from.need_check_feed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VarDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.VarDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarDesc::CopyFrom(const VarDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.VarDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_type()) {
    if (!type_->IsInitialized()) return false;
  }
  return true;
}

void VarDesc::InternalSwap(VarDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VarDesc, need_check_feed_)
      + sizeof(VarDesc::need_check_feed_)
      - PROTOBUF_FIELD_OFFSET(VarDesc, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VarDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<BlockDesc>()._has_bits_);
  static void set_has_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_parent_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_forward_block_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

BlockDesc::BlockDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vars_(arena),
  ops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.BlockDesc)
}
BlockDesc::BlockDesc(const BlockDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      vars_(from.vars_),
      ops_(from.ops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&idx_, &from.idx_,
    static_cast<size_t>(reinterpret_cast<char*>(&forward_block_idx_) -
    reinterpret_cast<char*>(&idx_)) + sizeof(forward_block_idx_));
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.BlockDesc)
}

void BlockDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockDesc_framework_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&parent_idx_) -
      reinterpret_cast<char*>(&idx_)) + sizeof(parent_idx_));
  forward_block_idx_ = -1;
}

BlockDesc::~BlockDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.BlockDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BlockDesc::ArenaDtor(void* object) {
  BlockDesc* _this = reinterpret_cast< BlockDesc* >(object);
  (void)_this;
}
void BlockDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockDesc& BlockDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void BlockDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.BlockDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vars_.Clear();
  ops_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&idx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&parent_idx_) -
        reinterpret_cast<char*>(&idx_)) + sizeof(parent_idx_));
    forward_block_idx_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 idx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_idx(&has_bits);
          idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 parent_idx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_parent_idx(&has_bits);
          parent_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.VarDesc vars = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .paddle.framework.proto.OpDesc ops = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 forward_block_idx = 5 [default = -1];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_forward_block_idx(&has_bits);
          forward_block_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.BlockDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 idx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_idx(), target);
  }

  // required int32 parent_idx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_parent_idx(), target);
  }

  // repeated .paddle.framework.proto.VarDesc vars = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_vars(i), target, stream);
  }

  // repeated .paddle.framework.proto.OpDesc ops = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ops(i), target, stream);
  }

  // optional int32 forward_block_idx = 5 [default = -1];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_forward_block_idx(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.BlockDesc)
  return target;
}

size_t BlockDesc::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.BlockDesc)
  size_t total_size = 0;

  if (_internal_has_idx()) {
    // required int32 idx = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());
  }

  if (_internal_has_parent_idx()) {
    // required int32 parent_idx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_idx());
  }

  return total_size;
}
size_t BlockDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.BlockDesc)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 idx = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_idx());

    // required int32 parent_idx = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_parent_idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.VarDesc vars = 3;
  total_size += 1UL * this->_internal_vars_size();
  for (const auto& msg : this->vars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .paddle.framework.proto.OpDesc ops = 4;
  total_size += 1UL * this->_internal_ops_size();
  for (const auto& msg : this->ops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 forward_block_idx = 5 [default = -1];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_forward_block_idx());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.BlockDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.BlockDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.BlockDesc)
    MergeFrom(*source);
  }
}

void BlockDesc::MergeFrom(const BlockDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.BlockDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vars_.MergeFrom(from.vars_);
  ops_.MergeFrom(from.ops_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000002u) {
      parent_idx_ = from.parent_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      forward_block_idx_ = from.forward_block_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.BlockDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockDesc::CopyFrom(const BlockDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.BlockDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockDesc::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(vars_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ops_)) return false;
  return true;
}

void BlockDesc::InternalSwap(BlockDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vars_.InternalSwap(&other->vars_);
  ops_.InternalSwap(&other->ops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockDesc, parent_idx_)
      + sizeof(BlockDesc::parent_idx_)
      - PROTOBUF_FIELD_OFFSET(BlockDesc, idx_)>(
          reinterpret_cast<char*>(&idx_),
          reinterpret_cast<char*>(&other->idx_));
  swap(forward_block_idx_, other->forward_block_idx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpVersion::_Internal {
 public:
  using HasBits = decltype(std::declval<OpVersion>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

OpVersion::OpVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpVersion)
}
OpVersion::OpVersion(const OpVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpVersion)
}

void OpVersion::SharedCtor() {
  version_ = 0;
}

OpVersion::~OpVersion() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpVersion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpVersion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpVersion::ArenaDtor(void* object) {
  OpVersion* _this = reinterpret_cast< OpVersion* >(object);
  (void)_this;
}
void OpVersion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpVersion& OpVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpVersion_framework_2eproto.base);
  return *internal_default_instance();
}


void OpVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpVersion)
  return target;
}

size_t OpVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpVersion)
  size_t total_size = 0;

  // required int32 version = 1;
  if (_internal_has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const OpVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpVersion)
    MergeFrom(*source);
  }
}

void OpVersion::MergeFrom(const OpVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
}

void OpVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpVersion::CopyFrom(const OpVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpVersion::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OpVersion::InternalSwap(OpVersion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpVersionMap_OpVersionPair::_Internal {
 public:
  using HasBits = decltype(std::declval<OpVersionMap_OpVersionPair>()._has_bits_);
  static void set_has_op_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::paddle::framework::proto::OpVersion& op_version(const OpVersionMap_OpVersionPair* msg);
  static void set_has_op_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::paddle::framework::proto::OpVersion&
OpVersionMap_OpVersionPair::_Internal::op_version(const OpVersionMap_OpVersionPair* msg) {
  return *msg->op_version_;
}
OpVersionMap_OpVersionPair::OpVersionMap_OpVersionPair(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpVersionMap.OpVersionPair)
}
OpVersionMap_OpVersionPair::OpVersionMap_OpVersionPair(const OpVersionMap_OpVersionPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_op_name()) {
    op_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_op_name(), 
      GetArena());
  }
  if (from._internal_has_op_version()) {
    op_version_ = new ::paddle::framework::proto::OpVersion(*from.op_version_);
  } else {
    op_version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpVersionMap.OpVersionPair)
}

void OpVersionMap_OpVersionPair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpVersionMap_OpVersionPair_framework_2eproto.base);
  op_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  op_version_ = nullptr;
}

OpVersionMap_OpVersionPair::~OpVersionMap_OpVersionPair() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpVersionMap.OpVersionPair)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpVersionMap_OpVersionPair::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  op_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete op_version_;
}

void OpVersionMap_OpVersionPair::ArenaDtor(void* object) {
  OpVersionMap_OpVersionPair* _this = reinterpret_cast< OpVersionMap_OpVersionPair* >(object);
  (void)_this;
}
void OpVersionMap_OpVersionPair::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpVersionMap_OpVersionPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpVersionMap_OpVersionPair& OpVersionMap_OpVersionPair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpVersionMap_OpVersionPair_framework_2eproto.base);
  return *internal_default_instance();
}


void OpVersionMap_OpVersionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      op_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(op_version_ != nullptr);
      op_version_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpVersionMap_OpVersionPair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string op_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_op_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "paddle.framework.proto.OpVersionMap.OpVersionPair.op_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .paddle.framework.proto.OpVersion op_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpVersionMap_OpVersionPair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string op_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "paddle.framework.proto.OpVersionMap.OpVersionPair.op_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_name(), target);
  }

  // required .paddle.framework.proto.OpVersion op_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::op_version(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpVersionMap.OpVersionPair)
  return target;
}

size_t OpVersionMap_OpVersionPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  size_t total_size = 0;

  if (_internal_has_op_name()) {
    // required string op_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  if (_internal_has_op_version()) {
    // required .paddle.framework.proto.OpVersion op_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_version_);
  }

  return total_size;
}
size_t OpVersionMap_OpVersionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string op_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());

    // required .paddle.framework.proto.OpVersion op_version = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *op_version_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpVersionMap_OpVersionPair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  GOOGLE_DCHECK_NE(&from, this);
  const OpVersionMap_OpVersionPair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpVersionMap_OpVersionPair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpVersionMap.OpVersionPair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpVersionMap.OpVersionPair)
    MergeFrom(*source);
  }
}

void OpVersionMap_OpVersionPair::MergeFrom(const OpVersionMap_OpVersionPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_op_name(from._internal_op_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_op_version()->::paddle::framework::proto::OpVersion::MergeFrom(from._internal_op_version());
    }
  }
}

void OpVersionMap_OpVersionPair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpVersionMap_OpVersionPair::CopyFrom(const OpVersionMap_OpVersionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpVersionMap.OpVersionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpVersionMap_OpVersionPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_op_version()) {
    if (!op_version_->IsInitialized()) return false;
  }
  return true;
}

void OpVersionMap_OpVersionPair::InternalSwap(OpVersionMap_OpVersionPair* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  op_name_.Swap(&other->op_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(op_version_, other->op_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpVersionMap_OpVersionPair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class OpVersionMap::_Internal {
 public:
};

OpVersionMap::OpVersionMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  pair_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.OpVersionMap)
}
OpVersionMap::OpVersionMap(const OpVersionMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pair_(from.pair_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.OpVersionMap)
}

void OpVersionMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OpVersionMap_framework_2eproto.base);
}

OpVersionMap::~OpVersionMap() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.OpVersionMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OpVersionMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OpVersionMap::ArenaDtor(void* object) {
  OpVersionMap* _this = reinterpret_cast< OpVersionMap* >(object);
  (void)_this;
}
void OpVersionMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OpVersionMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OpVersionMap& OpVersionMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OpVersionMap_framework_2eproto.base);
  return *internal_default_instance();
}


void OpVersionMap::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.OpVersionMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OpVersionMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .paddle.framework.proto.OpVersionMap.OpVersionPair pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OpVersionMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.OpVersionMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.OpVersionMap.OpVersionPair pair = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pair_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pair(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.OpVersionMap)
  return target;
}

size_t OpVersionMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.OpVersionMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.OpVersionMap.OpVersionPair pair = 1;
  total_size += 1UL * this->_internal_pair_size();
  for (const auto& msg : this->pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpVersionMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.OpVersionMap)
  GOOGLE_DCHECK_NE(&from, this);
  const OpVersionMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OpVersionMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.OpVersionMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.OpVersionMap)
    MergeFrom(*source);
  }
}

void OpVersionMap::MergeFrom(const OpVersionMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.OpVersionMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pair_.MergeFrom(from.pair_);
}

void OpVersionMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.OpVersionMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpVersionMap::CopyFrom(const OpVersionMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.OpVersionMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpVersionMap::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pair_)) return false;
  return true;
}

void OpVersionMap::InternalSwap(OpVersionMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  pair_.InternalSwap(&other->pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OpVersionMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ProgramDesc::_Internal {
 public:
  using HasBits = decltype(std::declval<ProgramDesc>()._has_bits_);
  static const ::paddle::framework::proto::Version& version(const ProgramDesc* msg);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::paddle::framework::proto::OpVersionMap& op_version_map(const ProgramDesc* msg);
  static void set_has_op_version_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::paddle::framework::proto::Version&
ProgramDesc::_Internal::version(const ProgramDesc* msg) {
  return *msg->version_;
}
const ::paddle::framework::proto::OpVersionMap&
ProgramDesc::_Internal::op_version_map(const ProgramDesc* msg) {
  return *msg->op_version_map_;
}
ProgramDesc::ProgramDesc(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:paddle.framework.proto.ProgramDesc)
}
ProgramDesc::ProgramDesc(const ProgramDesc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_version()) {
    version_ = new ::paddle::framework::proto::Version(*from.version_);
  } else {
    version_ = nullptr;
  }
  if (from._internal_has_op_version_map()) {
    op_version_map_ = new ::paddle::framework::proto::OpVersionMap(*from.op_version_map_);
  } else {
    op_version_map_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:paddle.framework.proto.ProgramDesc)
}

void ProgramDesc::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProgramDesc_framework_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&op_version_map_) -
      reinterpret_cast<char*>(&version_)) + sizeof(op_version_map_));
}

ProgramDesc::~ProgramDesc() {
  // @@protoc_insertion_point(destructor:paddle.framework.proto.ProgramDesc)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProgramDesc::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete version_;
  if (this != internal_default_instance()) delete op_version_map_;
}

void ProgramDesc::ArenaDtor(void* object) {
  ProgramDesc* _this = reinterpret_cast< ProgramDesc* >(object);
  (void)_this;
}
void ProgramDesc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProgramDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProgramDesc& ProgramDesc::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProgramDesc_framework_2eproto.base);
  return *internal_default_instance();
}


void ProgramDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:paddle.framework.proto.ProgramDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(version_ != nullptr);
      version_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(op_version_map_ != nullptr);
      op_version_map_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProgramDesc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .paddle.framework.proto.BlockDesc blocks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.Version version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .paddle.framework.proto.OpVersionMap op_version_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_op_version_map(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProgramDesc::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:paddle.framework.proto.ProgramDesc)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.BlockDesc blocks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_blocks(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .paddle.framework.proto.Version version = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::version(this), target, stream);
  }

  // optional .paddle.framework.proto.OpVersionMap op_version_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::op_version_map(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:paddle.framework.proto.ProgramDesc)
  return target;
}

size_t ProgramDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:paddle.framework.proto.ProgramDesc)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .paddle.framework.proto.BlockDesc blocks = 1;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .paddle.framework.proto.Version version = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *version_);
    }

    // optional .paddle.framework.proto.OpVersionMap op_version_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *op_version_map_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProgramDesc::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:paddle.framework.proto.ProgramDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const ProgramDesc* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProgramDesc>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:paddle.framework.proto.ProgramDesc)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:paddle.framework.proto.ProgramDesc)
    MergeFrom(*source);
  }
}

void ProgramDesc::MergeFrom(const ProgramDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:paddle.framework.proto.ProgramDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_version()->::paddle::framework::proto::Version::MergeFrom(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_op_version_map()->::paddle::framework::proto::OpVersionMap::MergeFrom(from._internal_op_version_map());
    }
  }
}

void ProgramDesc::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:paddle.framework.proto.ProgramDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProgramDesc::CopyFrom(const ProgramDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:paddle.framework.proto.ProgramDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProgramDesc::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blocks_)) return false;
  if (_internal_has_op_version_map()) {
    if (!op_version_map_->IsInitialized()) return false;
  }
  return true;
}

void ProgramDesc::InternalSwap(ProgramDesc* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blocks_.InternalSwap(&other->blocks_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProgramDesc, op_version_map_)
      + sizeof(ProgramDesc::op_version_map_)
      - PROTOBUF_FIELD_OFFSET(ProgramDesc, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProgramDesc::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace framework
}  // namespace paddle
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::Version* Arena::CreateMaybeMessage< ::paddle::framework::proto::Version >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpDesc_Attr* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpDesc_Attr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpDesc_Attr >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpDesc_Var* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpDesc_Var >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpDesc_Var >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpProto_Var* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpProto_Var >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpProto_Var >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpProto_Attr* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpProto_Attr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpProto_Attr >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpProto* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpProto >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType_TensorDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType_TensorDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType_TensorDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType_LoDTensorDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType_LoDTensorDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType_LoDTensorDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType_LoDTensorArrayDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType_LoDTensorArrayDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType_LoDTensorArrayDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType_ReaderDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType_ReaderDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType_ReaderDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType_Tuple* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType_Tuple >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType_Tuple >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarType* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarType >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::VarDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::VarDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::VarDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::BlockDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::BlockDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::BlockDesc >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpVersion* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpVersion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpVersion >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpVersionMap_OpVersionPair* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpVersionMap_OpVersionPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpVersionMap_OpVersionPair >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::OpVersionMap* Arena::CreateMaybeMessage< ::paddle::framework::proto::OpVersionMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::OpVersionMap >(arena);
}
template<> PROTOBUF_NOINLINE ::paddle::framework::proto::ProgramDesc* Arena::CreateMaybeMessage< ::paddle::framework::proto::ProgramDesc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::paddle::framework::proto::ProgramDesc >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
